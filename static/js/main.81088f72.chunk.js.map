{"version":3,"sources":["Constants.ts","CardHand.tsx","GameManager.tsx","App.js","reportWebVitals.js","index.js"],"names":["SUITS","CARD_VALUES","NULL_GAME","userHand","sets","runs","deadwood","computerHand","deck","discard","currentStage","userGameScore","computerGameScore","CardHand","props","gameState","setGameState","onCardSelect","hand","faceUp","getFlatHand","map","card","onClick","console","log","src","process","cardToString","alt","style","maxHeight","margin","className","marginLeft","calculateDeadwood","undefined","score","forEach","cardScore","indexOf","value","flat","concat","getCardInSequence","offset","nextValue","suit","GameManager","useState","useEffect","drawFromDeck","length","faceupCard","existingSet","some","set","makesSet","filter","existingRun","run","makesSequence","computerDrawCardFromDeck","computerMoves","push","drawnCard","pop","buildHand","possibleDiscardCard","valueCount","getValueCount","highValueCardCount","maxCard","sort","cardA","cardB","rankedHand","cardValueCount","preSet","preRun","nextCard","prevCard","card1","cardUtilityA","cardUtilityB","rankCardUtility","selectedCard","evaluateMovesTraditional","selectedDiscardCard","discardIndex","discarded","splice","deadwoodScore","shouldKnock","knock","computerPlayerTurn","initGameState","display","justifyContent","Dropdown","Toggle","path","mdiMenu","size","color","Menu","Item","onExit","flexDirection","alignItems","pickupCard","move","turnText","winner","starter","startNextRound","fontSize","discardCard","marginTop","startStage","userHandFlat","Math","random","slice","computerHandFlat","includes","flatHand","sortedHand","suitAOffset","suitBOffset","i","currentRun","filteredHand","flatCard","newHand","handState","valueCountMap","prev1","prev2","card2","next1","next2","user","playerScore","computerScore","tempDeadwood","inSet","extendsRun","updatedPlayerScore","updatedComputerScore","layoff","App","gameStarted","setGameStarted","fontFamily","backgroundColor","textAlign","padding","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81088f72.chunk.js","sourcesContent":["export const SUITS = ['S', 'C', 'H', 'D']\r\n\r\nexport const CARD_VALUES = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\r\n\r\nexport const STAGES = ['pickup', 'discard', 'knock', 'computer', 'endround']\r\n\r\nconst colors = [\"e63946\",\"f1faee\",\"a8dadc\",\"457b9d\",\"1d3557\"]\r\n\r\nexport const GAME_SCORE_LIMIT = 100\r\n\r\nexport const GIN_BONUS = 25\r\n\r\nexport const UNDERCUT_BONUS = 25\r\n\r\nexport const NULL_GAME = {\r\n    userHand: {sets: [], runs: [], deadwood: []},\r\n    computerHand: {sets: [], runs: [], deadwood: []},\r\n    deck: [],\r\n    discard: [],\r\n    currentStage: '',\r\n    userGameScore: 0,\r\n    computerGameScore: 0\r\n}","import { CARD_VALUES } from \"./Constants\"\r\nimport { GameState } from \"./GameManager\"\r\n\r\nexport type Card = {\r\n    value: string\r\n    suit: string\r\n}\r\n\r\nexport type HandState = {\r\n    sets: Card[][]\r\n    runs: Card[][]\r\n    deadwood: Card[]\r\n}\r\n\r\nexport function CardHand(props: {hand: HandState,\r\n                                 onCardSelect?: (selectedCard: Card, gameState: GameState) => GameState,\r\n                                 gameState: GameState,\r\n                                 setGameState?: any,\r\n                                 faceUp: boolean}){\r\n    const {gameState, setGameState, onCardSelect, hand, faceUp} = props\r\n    return (\r\n        <div>\r\n            <div>\r\n                {getFlatHand(props.hand).map((card) => {\r\n                    return <img \r\n                            onClick={() => onCardSelect && setGameState ? setGameState({...onCardSelect(card, gameState)}) : console.log(\"You cannot discard an opponent's card\")} \r\n                            src={faceUp ? `${process.env.PUBLIC_URL}/cards/${cardToString(card)}.jpg` : `${process.env.PUBLIC_URL}/cards/blue_back.jpg`} \r\n                            alt={cardToString(card)} \r\n                            style={{maxHeight: 180, margin: 10}} \r\n                            key={cardToString(card)}/>\r\n                })}\r\n            </div>\r\n            {faceUp ? <p className='game-text' style={{marginLeft: '20px'}}>Score: {calculateDeadwood(hand.deadwood)}</p> : undefined}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function calculateDeadwood(deadwood: Card[]): number{\r\n    let score = 0\r\n\r\n    deadwood.forEach((card) => {\r\n        const cardScore = CARD_VALUES.indexOf(card.value) + 1\r\n        score += (cardScore > 9 ? 10 : cardScore)\r\n    })\r\n\r\n    return score\r\n}\r\n\r\nexport function getFlatHand(hand: HandState): Card[]{\r\n    return hand.sets.flat().concat(hand.runs.flat(), hand.deadwood)\r\n}\r\n\r\nexport function getCardInSequence(card: Card, offset = 1): Card | null {\r\n    const nextValue = CARD_VALUES[CARD_VALUES.indexOf(card.value) + offset]\r\n    if(!nextValue){\r\n        return null\r\n    }\r\n\r\n    return {value: nextValue, suit: card.suit}\r\n}\r\n\r\nexport function cardToString(card: Card): string{\r\n    return `${card.value}${card.suit}`\r\n}\r\n\r\nexport function nameOfCard(card: Card): string{\r\n    const suit = () => {\r\n        switch(card.suit){\r\n            case 'H':\r\n                return 'Hearts'\r\n            case 'D':\r\n                return 'Diamonds'\r\n            case 'S':\r\n                return 'Spades'\r\n            default:\r\n                return 'Clubs'\r\n    }}\r\n\r\n    const value = () => {\r\n        switch(card.value){\r\n            case 'A':\r\n                return 'Ace'\r\n            case 'K':\r\n                return 'King'\r\n            case 'Q':\r\n                return 'Queen'\r\n            case 'J':\r\n                return 'Jack'\r\n            default:\r\n                return card.value\r\n    }}\r\n\r\n    return `${value()} of ${suit()}`\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { CARD_VALUES, SUITS, GIN_BONUS, UNDERCUT_BONUS, NULL_GAME } from \"./Constants\";\r\nimport _ from 'lodash';\r\nimport { CardHand, getFlatHand, getCardInSequence, HandState, Card, cardToString, calculateDeadwood, nameOfCard } from \"./CardHand\";\r\nimport Icon from '@mdi/react'\r\nimport { mdiMenu } from '@mdi/js'\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\nexport type GameState = {\r\n    userHand: HandState\r\n    computerHand: HandState\r\n    deck: Card[]\r\n    discard: Card[]\r\n    currentStage: string\r\n    winner?: string\r\n    computerMoves?: string[]\r\n    userGameScore: number\r\n    computerGameScore: number\r\n}\r\n\r\ntype Utility = {\r\n    card: Card\r\n    score: number\r\n}\r\n\r\nexport function GameManager(props: {onExit: (toggle: boolean) => void}){\r\n\r\n    const [gameState, setGameState] = useState<GameState>(NULL_GAME)\r\n\r\n    useEffect(()=> {\r\n        if(gameState.currentStage === 'computer'){\r\n            setGameState({...computerPlayerTurn(gameState)})\r\n        }\r\n    }, [gameState])\r\n\r\n    useEffect(() => setGameState({...initGameState()}), [])\r\n\r\n    const turnText = () => {\r\n        switch(gameState.currentStage){\r\n            case 'discard':\r\n                return 'Click on the card you want to discard'\r\n            case 'pickup':\r\n                return 'Click on the card you want to pick up'\r\n            case 'knock':\r\n                return 'Do you want to knock?'\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div style={{margin: '30px'}}>\r\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                <div></div>\r\n                <CardHand hand={gameState.computerHand} gameState={gameState} faceUp={gameState.currentStage === 'endround'}/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle className='menu-button'>\r\n                        <Icon path={mdiMenu} size={2} color={\"gray\"}/>\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu className='in-game-menu'>\r\n                        <Dropdown.Item className='menu-item' onClick={() => setGameState(initGameState())}>Reset Game</Dropdown.Item>\r\n                        <Dropdown.Item className='menu-item' onClick={() => props.onExit(false)}>Exit Game</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n                    <p className='game-text'>Discard Pile</p>\r\n                    { gameState.discard.length > 0 ?\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/cards/${cardToString(gameState.discard[gameState.discard.length-1])}.jpg`} \r\n                            onClick={() => setGameState({...pickupCard(true, gameState)})}\r\n                            alt={cardToString(gameState.discard[gameState.discard.length-1])} \r\n                            style={{maxHeight: 180, margin: 10}}/>\r\n                        : <p style={{margin: 20}}>Empty</p>\r\n                    }\r\n                </div>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly', margin: '10px 100px 10px 100px'}}>\r\n                    {(gameState.currentStage === 'pickup' && gameState.computerMoves) ? gameState.computerMoves.map((move) => <p className='game-text'>{move}</p>) : undefined}\r\n                    <p className='game-text'>{turnText()}</p>\r\n                    {gameState.currentStage === 'knock' ? \r\n                        <div>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...knock(gameState, true)})}>Knock</button>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...gameState, currentStage: 'computer'})}>End Turn</button>  \r\n                        </div> :\r\n                        undefined\r\n                    }\r\n                    {\r\n                        gameState.currentStage === 'endround' ? \r\n                        <>\r\n                            <p className='game-text'>{`${gameState.winner ?? ''} won that round`}</p>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...startNextRound(gameState)})}>End Round</button>\r\n                        </> :\r\n                        undefined\r\n                    }  \r\n                </div>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n                    <p className='game-text'>Deck</p>\r\n                    <p className='game-text' style ={{fontSize: '20px'}}>{`Cards Left: ${gameState.deck.length}`}</p>\r\n                    { gameState.deck.length > 0 ?\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/cards/blue_back.jpg`} \r\n                            onClick={() => setGameState({...pickupCard(false, gameState)})}\r\n                            alt={cardToString(gameState.deck[gameState.deck.length-1])} \r\n                            style={{maxHeight: 180, margin: 10}}/>\r\n                        : <p style={{margin: 20}}>Empty</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                <CardHand hand={gameState.userHand} onCardSelect={discardCard} gameState={gameState} setGameState={setGameState} faceUp={true}/>\r\n            </div>   \r\n\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around', marginTop: '40px'}}>\r\n                <p className='game-text'>{`Player Game Score: ${gameState.userGameScore}`}</p>\r\n                <p className='game-text'>{`Computer Game Score: ${gameState.computerGameScore}`}</p>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction initGameState(startStage?: string): GameState{\r\n    let deck: Card[] = []\r\n\r\n    SUITS.forEach((suit) => {\r\n        CARD_VALUES.forEach((value) => {\r\n            deck.push({value, suit})\r\n        })\r\n    })\r\n\r\n    const userHandFlat = deck.sort(() => Math.random() - Math.random()).slice(0, 10)\r\n\r\n    deck = deck.filter((card) => !userHandFlat.includes(card))\r\n\r\n    const computerHandFlat = deck.sort(() => Math.random() - Math.random()).slice(0, 10)\r\n\r\n    deck = deck.filter((card) => !computerHandFlat.includes(card))\r\n\r\n    const discard = [deck[0]]\r\n    deck = deck.slice(1)\r\n\r\n    console.log(startStage)\r\n    const currentStage = startStage ?? (Math.random() > 0.5 ? 'computer' : 'pickup') \r\n    console.log(currentStage)\r\n\r\n    const userHand = buildHand(userHandFlat)\r\n    const computerHand = buildHand(computerHandFlat)\r\n\r\n    const userGameScore = 0\r\n    const computerGameScore = 0\r\n\r\n    return { userHand, computerHand, deck, discard, currentStage, userGameScore, computerGameScore }\r\n}\r\n\r\nfunction startNextRound(gameState: GameState): GameState {\r\n    const userGameScore = gameState.userGameScore\r\n    const computerGameScore = gameState.computerGameScore\r\n\r\n    const starter = gameState.winner === 'You' ? 'pickup' : 'computer'\r\n\r\n    return {...initGameState(starter), computerGameScore, userGameScore}\r\n}\r\n\r\nfunction buildHand(flatHand: Card[]): HandState{\r\n    const sortedHand = flatHand.sort((cardA, cardB) => {\r\n\r\n        const suitAOffset = SUITS.indexOf(cardA.suit) * 13\r\n        const suitBOffset = SUITS.indexOf(cardB.suit) * 13\r\n\r\n        const valA = CARD_VALUES.indexOf(cardA.value)\r\n        const valB = CARD_VALUES.indexOf(cardB.value)\r\n\r\n        return (suitAOffset+valA) - (suitBOffset+valB)\r\n    })\r\n\r\n    const runs: Card[][] = []\r\n\r\n    for(let i = 0; i < sortedHand.length-2; i++){\r\n        const currentRun: Card[] = []\r\n\r\n        if(makesSequence(sortedHand, sortedHand[i])){\r\n            currentRun.push(sortedHand[i])\r\n\r\n            let nextCard = getCardInSequence(sortedHand[i], 1)\r\n            while(!!nextCard && sortedHand.some(card => card.value == nextCard?.value && card.suit == nextCard?.suit) && i < sortedHand.length){\r\n                currentRun.push(nextCard)\r\n                i++\r\n\r\n                nextCard = getCardInSequence(sortedHand[i], 1)\r\n            }\r\n        }\r\n\r\n        if(currentRun.length > 2){\r\n            runs.push(currentRun)\r\n        }\r\n    }\r\n\r\n    const filteredHand = flatHand.filter((card) => !runs.flat().some(flatCard => card.value === flatCard?.value && card.suit === flatCard?.suit))\r\n\r\n    const sets: Card[][] = []\r\n    \r\n    CARD_VALUES.forEach((value) => {\r\n        const set: Card[] = []\r\n        SUITS.forEach((suit) => {\r\n            if(filteredHand.some(card => card.suit === suit && card.value === value)){\r\n                set.push({suit, value})\r\n            }\r\n        })  \r\n        \r\n        if(set.length > 2){\r\n            sets.push(set)\r\n        }\r\n    })\r\n\r\n    const deadwood = filteredHand.filter((card) => !sets.flat().some(flatCard => card.value === flatCard?.value && card.suit === flatCard?.suit))\r\n    \r\n    \r\n    return {sets, runs, deadwood}\r\n}\r\n\r\nfunction discardCard(selectedCard: Card, gameState: GameState): GameState{\r\n\r\n    if(gameState.currentStage === 'discard'){\r\n        const hand = getFlatHand(gameState.userHand)\r\n        const newHand = buildHand(hand.filter((card) => (card.value !== selectedCard.value) || (card.suit !== selectedCard.suit)))\r\n    \r\n        gameState.discard.push(selectedCard)\r\n        gameState.userHand = newHand\r\n        \r\n        gameState.currentStage = calculateDeadwood(gameState.userHand.deadwood) > 10 ? \"computer\" : \"knock\"\r\n    }\r\n\r\n    return gameState\r\n}\r\n\r\nfunction pickupCard(faceUp: boolean, gameState: GameState): GameState{\r\n\r\n    if(gameState.currentStage === \"pickup\"){\r\n        const selectedCard = faceUp ? gameState.discard.pop() : gameState.deck.pop()\r\n\r\n        if(selectedCard){\r\n            const hand = getFlatHand(gameState.userHand)\r\n            hand.push(selectedCard)\r\n    \r\n            const handState = buildHand(hand)\r\n            gameState.userHand = handState\r\n            gameState.currentStage = \"discard\"\r\n        }\r\n    }\r\n\r\n    return gameState\r\n}\r\n\r\nfunction computerPlayerTurn(gameState: GameState){\r\n\r\n    // Decide if drawing face up or face down card\r\n    const drawFromDeck = computerDrawCardFromDeck(gameState)\r\n\r\n    const computerMoves = []\r\n\r\n    drawFromDeck ? computerMoves.push('Computer drew from deck') : computerMoves.push('Computer drew from discard')\r\n\r\n    const drawnCard = drawFromDeck ? gameState.deck.pop() : gameState.discard.pop()\r\n\r\n    const hand = getFlatHand(gameState.computerHand)\r\n\r\n    if(drawnCard){\r\n        hand.push(drawnCard)\r\n\r\n        gameState.computerHand = buildHand(hand)   \r\n    }\r\n\r\n    // Evaluate the card to discard that maximizes computer gain while minimizing \r\n    // player gain\r\n    const possibleDiscardCard = evaluateMovesTraditional(gameState)\r\n    const selectedDiscardCard  = typeof possibleDiscardCard === \"string\" && drawnCard ? drawnCard : possibleDiscardCard\r\n\r\n    if(typeof selectedDiscardCard != 'string'){\r\n        computerMoves.push(`Opponent discarded the ${nameOfCard(selectedDiscardCard)}`) \r\n\r\n        // Discard the card\r\n        const discardIndex = hand.indexOf(selectedDiscardCard);\r\n        if (discardIndex > -1) {\r\n        const discarded = hand.splice(discardIndex, 1);\r\n        gameState.discard.push(discarded[0])\r\n        }\r\n    }\r\n\r\n    gameState.computerHand = buildHand(hand)  \r\n\r\n    // Declare knocking if criteria met\r\n    if(shouldKnock(gameState)){\r\n        return knock(gameState, false)\r\n    }\r\n    gameState.currentStage = \"pickup\"\r\n    gameState.computerMoves = computerMoves\r\n\r\n    return gameState\r\n}\r\n\r\nfunction computerDrawCardFromDeck(gameState: GameState): boolean {\r\n\r\n    if(gameState.discard.length > 0){\r\n        const faceupCard = gameState.discard[gameState.discard.length - 1]\r\n    \r\n        const existingSet = gameState.computerHand.sets.some((set) => set[0].value=== faceupCard.value)\r\n\r\n        const makesSet = gameState.computerHand.deadwood.filter((card) => card.value === faceupCard.value).length > 1\r\n\r\n        const existingRun = gameState.computerHand.runs.some((run) => getCardInSequence(run[run.length-1], 1) === faceupCard || getCardInSequence(run[0], -1) === faceupCard)\r\n    \r\n        if(makesSet || existingSet || existingRun || makesSequence(gameState.computerHand.deadwood, faceupCard)){\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction getValueCount(hand: Card[]): any {\r\n\r\n    const valueCountMap: any = {'A': 0, '2': 0, '3': 0, '4': 0, '5' : 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, 'J': 0, 'Q': 0, 'K': 0}\r\n\r\n    hand.forEach((card) => {\r\n        if(card.value in valueCountMap){\r\n            valueCountMap[card.value] += 1 \r\n        }\r\n    })\r\n\r\n    return valueCountMap\r\n}\r\n\r\nfunction makesSequence(hand: Card[], card: Card): boolean{\r\n\r\n    if(card.value !== 'A' && card.value !== '2'){\r\n        const prev1 = getCardInSequence(card, -1)\r\n        const prev2 =  getCardInSequence(card, -2)\r\n\r\n        if(prev1 && prev2 && hand.some(card1 => cardToString(card1) === cardToString(prev1)) &&  hand.some(card2 => cardToString(card2) === cardToString(prev2))){\r\n            return true\r\n        }\r\n    }\r\n\r\n    if(card.value !== 'K' && card.value !== 'Q'){\r\n        const next1 = getCardInSequence(card, 1)\r\n        const next2 =  getCardInSequence(card, 2)\r\n\r\n        if(next1 && next2 && hand.some(card1 => cardToString(card1) === cardToString(next1)) && hand.some(card2 => cardToString(card2) === cardToString(next2))){\r\n            return true\r\n        }\r\n    }\r\n\r\n    const prev1 = getCardInSequence(card, -1)\r\n    const next1 = getCardInSequence(card, 1)\r\n\r\n    if(prev1 && next1 && hand.some(card1 => cardToString(card1) === cardToString(prev1)) && hand.some(card1 => cardToString(card1) === cardToString(next1))){\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction evaluateMovesTraditional(gameState: GameState): Card | string{\r\n\r\n    const valueCount = getValueCount(gameState.computerHand.deadwood)\r\n    const highValueCardCount = valueCount['10'] + valueCount['J'] + valueCount['Q'] + valueCount['K']\r\n\r\n    // If half of deck expended start getting rid of high value cards if there are any in hand\r\n    if(gameState.deck.length < 20 && highValueCardCount > 0){\r\n        const maxCard = gameState.computerHand.deadwood.sort((cardA, cardB) =>  CARD_VALUES.indexOf(cardA.value) - CARD_VALUES.indexOf(cardB.value)).pop()\r\n\r\n        return maxCard ? maxCard : 'knock'\r\n    } \r\n\r\n    // Ranks cards by their likelyhood to contribute to a future set/run\r\n    // Discard lowest of these\r\n    const rankedHand = rankCardUtility(gameState.computerHand.deadwood)\r\n\r\n    const selectedCard = rankedHand.pop()?.card\r\n\r\n    return selectedCard ? selectedCard : 'knock'\r\n}\r\n\r\nfunction shouldKnock(gameState: GameState): boolean {\r\n    // TODO extend for other situations\r\n    const deadwoodScore = calculateDeadwood(gameState.computerHand.deadwood)\r\n\r\n    if(deadwoodScore === 0){\r\n        return true\r\n    } else if(deadwoodScore <= 5 && gameState.deck.length > 18){\r\n        return true\r\n    } else if(deadwoodScore <= 10 && gameState.deck.length > 25){\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction rankCardUtility(deadwood: Card[]): Utility[]{\r\n\r\n    // +1 for every copy of the card\r\n    // +1 for every card in sequence\r\n    // +1 if part of trio\r\n    // -1 if greater than 9\r\n    // +1 if A or 2\r\n\r\n    const cardValueCount = getValueCount(deadwood)\r\n\r\n    const cardRanking = deadwood.map((card) =>{\r\n        let score = 0\r\n        let preSet = false\r\n        let preRun = false\r\n\r\n        if(cardValueCount[card.value] > 1){\r\n            score += (cardValueCount[card.value] - 1)\r\n            preSet = true\r\n        }\r\n\r\n        const nextCard = getCardInSequence(card, 1)\r\n        const prevCard = getCardInSequence(card, -1)\r\n\r\n        if((nextCard && deadwood.some(card1 => cardToString(card1) === cardToString(nextCard))) || (prevCard && deadwood.some(card1 => cardToString(card1) === cardToString(prevCard)))){\r\n            score += 1\r\n            preRun = true\r\n        }\r\n\r\n        if(preRun && preSet){\r\n            score += 1\r\n        }\r\n\r\n        score -= (CARD_VALUES.indexOf(card.value) + 1)/10\r\n\r\n        return {card, score}\r\n    }).sort((cardUtilityA, cardUtilityB) => cardUtilityB.score - cardUtilityA.score)\r\n\r\n    return cardRanking\r\n}\r\n\r\nfunction knock(gameState: GameState, user: boolean): GameState{\r\n\r\n    gameState.currentStage = 'endround'\r\n\r\n    const playerScore = calculateDeadwood(gameState.userHand.deadwood)\r\n    const computerScore = calculateDeadwood(gameState.computerHand.deadwood)\r\n\r\n    if(user && (playerScore === 0)){\r\n        return {...gameState, userGameScore: gameState.userGameScore + computerScore+GIN_BONUS, winner: 'You'}\r\n    } else if(!user && (computerScore === 0)){\r\n        return {...gameState, computerGameScore:  gameState.computerGameScore + playerScore+GIN_BONUS, winner: 'Your Opponent'}\r\n    }\r\n\r\n    const {updatedPlayerScore, updatedComputerScore} = layoff(gameState, user)\r\n\r\n    if(user && (updatedPlayerScore < updatedComputerScore)){\r\n        return {...gameState, userGameScore: gameState.userGameScore + updatedComputerScore - updatedPlayerScore, winner: 'You'}\r\n    } else if(user && (updatedPlayerScore > updatedComputerScore)){\r\n        return {...gameState, computerGameScore: gameState.computerGameScore + updatedPlayerScore - updatedComputerScore + UNDERCUT_BONUS,  winner: 'Your Opponent'}\r\n    } else if(!user && (updatedPlayerScore < updatedComputerScore)){\r\n        return {...gameState, userGameScore:   gameState.userGameScore + updatedComputerScore - updatedPlayerScore + UNDERCUT_BONUS,  winner: 'You'}\r\n    } else {\r\n        return {...gameState, computerGameScore:  gameState.computerGameScore + updatedPlayerScore - updatedComputerScore,  winner: 'Your Opponent'}\r\n    }\r\n}\r\n\r\nfunction layoff(gameState: GameState, user: boolean): {updatedPlayerScore: number, updatedComputerScore: number}{\r\n\r\n    if(user){\r\n        const tempDeadwood = gameState.computerHand.deadwood.filter((card) => {\r\n            const inSet = gameState.userHand.sets.some((set) => set[0].value === card.value)\r\n            const extendsRun = gameState.userHand.runs.some((run) => makesSequence(run, card))\r\n            return !inSet && !extendsRun\r\n        })\r\n\r\n        return {updatedPlayerScore: calculateDeadwood(gameState.userHand.deadwood), updatedComputerScore: calculateDeadwood(tempDeadwood)}\r\n    } else {\r\n        const tempDeadwood = gameState.userHand.deadwood.filter((card) => {\r\n            const inSet = gameState.computerHand.sets.some((set) => set[0].value === card.value)\r\n            const extendsRun = gameState.computerHand.runs.some((run) => makesSequence(run, card))\r\n            return !inSet && !extendsRun\r\n        })\r\n\r\n        return {updatedPlayerScore: calculateDeadwood(tempDeadwood), updatedComputerScore: calculateDeadwood(gameState.computerHand.deadwood)}\r\n    }\r\n}\r\n","import './App.css';\nimport React, { useState } from \"react\";\nimport { GameManager } from './GameManager';\n\nfunction App() {\n\n  const [gameStarted, setGameStarted] = useState(false)\n\n  return (\n    <>\n      <h1 style={{fontFamily: 'Lato',\n                  fontSize: '80px',\n                  color: '#F1FAEE',\n                  backgroundColor:\"#457B9D\",\n                  margin:\"0\",\n                  textAlign: 'center',\n                  padding: '20px'}}>Gin Rummy</h1>\n      {\n        gameStarted ? <GameManager onExit={setGameStarted}/> : \n        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '500px'}}>\n          <button className='game-button' onClick={() => setGameStarted(true)}>Start Game</button>\n        </div>\n      }\n    </>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}