{"version":3,"sources":["Constants.ts","CardHand.tsx","GameManager.tsx","App.js","reportWebVitals.js","index.js"],"names":["SUITS","CARD_VALUES","STAGES","CardHand","props","gameState","setGameState","onCardSelect","hand","faceUp","getFlatHand","map","card","onClick","console","log","src","process","cardToString","alt","style","maxHeight","margin","className","marginLeft","calculateDeadwood","deadwood","undefined","score","forEach","cardScore","indexOf","value","sets","flat","concat","runs","getCardInSequence","offset","nextValue","suit","GameManager","useState","initGameState","useEffect","display","justifyContent","computerHand","Dropdown","Toggle","path","mdiMenu","size","color","Menu","Item","flexDirection","alignItems","discard","length","pickupCard","currentStage","turnText","drawFromDeck","faceupCard","existingSet","some","set","makesSet","filter","existingRun","run","makesSequence","computerDrawCardFromDeck","drawnCard","deck","pop","push","buildHand","selectedDiscardCard","valueCount","getValueCount","highValueCardCount","maxCard","sort","cardA","cardB","rankedHand","cardValueCount","cardRanking","preSet","preRun","nextCard","prevCard","card1","cardUtilityA","cardUtilityB","rankCardUtility","selectedCard","evaluateMovesTraditional","knocker","discardIndex","discarded","splice","shouldKnock","computerPlayerTurn","fontSize","userHand","discardCard","userHandFlat","Math","random","slice","computerHandFlat","includes","flatHand","sortedHand","suitAOffset","suitBOffset","i","currentRun","filteredHand","flatCard","newHand","handState","valueCountMap","prev1","prev2","card2","next1","next2","App","fontFamily","backgroundColor","textAlign","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.334d795b.chunk.js","sourcesContent":["export const SUITS = ['S', 'C', 'H', 'D']\r\n\r\nexport const CARD_VALUES = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\r\n\r\nexport const MAX_TURN_EVAL = 10\r\n\r\nexport const STAGES = ['pickup', 'discard', 'knock', 'computer']\r\n\r\nconst colors = [\"e63946\",\"f1faee\",\"a8dadc\",\"457b9d\",\"1d3557\"]","import { CARD_VALUES } from \"./Constants\"\r\nimport { GameState } from \"./GameManager\"\r\n\r\nexport type Card = {\r\n    value: string\r\n    suit: string\r\n}\r\n\r\nexport type HandState = {\r\n    sets: Card[][]\r\n    runs: Card[][]\r\n    deadwood: Card[]\r\n}\r\n\r\nexport function CardHand(props: {hand: HandState,\r\n                                 onCardSelect?: (selectedCard: Card, gameState: GameState) => GameState,\r\n                                 gameState: GameState,\r\n                                 setGameState?: any,\r\n                                 faceUp: boolean}){\r\n    const {gameState, setGameState, onCardSelect, hand, faceUp} = props\r\n    return (\r\n        <div>\r\n            <div>\r\n                {getFlatHand(props.hand).map((card) => {\r\n                    return <img \r\n                            onClick={() => onCardSelect && setGameState ? setGameState({...onCardSelect(card, gameState)}) : console.log(\"You cannot discard an opponent's card\")} \r\n                            src={faceUp ? `${process.env.PUBLIC_URL}/cards/${cardToString(card)}.jpg` : `${process.env.PUBLIC_URL}/cards/blue_back.jpg`} \r\n                            alt={cardToString(card)} \r\n                            style={{maxHeight: 180, margin: 10}} \r\n                            key={cardToString(card)}/>\r\n                })}\r\n            </div>\r\n            {faceUp ? <p className='game-text' style={{marginLeft: '20px'}}>Score: {calculateDeadwood(hand.deadwood)}</p> : undefined}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction calculateDeadwood(deadwood: Card[]){\r\n    let score = 0\r\n\r\n    deadwood.forEach((card) => {\r\n        const cardScore = CARD_VALUES.indexOf(card.value) + 1\r\n        score += (cardScore > 9 ? 10 : cardScore)\r\n    })\r\n\r\n    return score\r\n}\r\n\r\nexport function getFlatHand(hand: HandState): Card[]{\r\n    return hand.sets.flat().concat(hand.runs.flat(), hand.deadwood)\r\n}\r\n\r\nexport function getCardInSequence(card: Card, offset = 1): Card | null {\r\n    const nextValue = CARD_VALUES[CARD_VALUES.indexOf(card.value) + offset]\r\n    if(!nextValue){\r\n        return null\r\n    }\r\n\r\n    return {value: nextValue, suit: card.suit}\r\n}\r\n\r\nexport function cardToString(card: Card): string{\r\n    return `${card.value}${card.suit}`\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { CARD_VALUES, SUITS, STAGES } from \"./Constants\";\r\nimport _ from 'lodash';\r\nimport { CardHand, getFlatHand, getCardInSequence, HandState, Card, cardToString } from \"./CardHand\";\r\nimport Button from 'react-bootstrap/Button'\r\nimport Icon from '@mdi/react'\r\nimport { mdiCog, mdiMenu } from '@mdi/js'\r\nimport { Dropdown } from \"react-bootstrap\";\r\n\r\nexport type GameState = {\r\n    userHand: HandState\r\n    computerHand: HandState\r\n    deck: Card[]\r\n    discard: Card[]\r\n    currentStage: string\r\n    knocker?: string\r\n    winner?: string\r\n}\r\n\r\ntype Utility = {\r\n    card: Card\r\n    score: number\r\n}\r\n\r\nexport function GameManager(){\r\n\r\n    const [gameState, setGameState] = useState(initGameState())\r\n\r\n    useEffect(()=> console.log(gameState))\r\n\r\n    const turnText = () => {\r\n        switch(gameState.currentStage){\r\n            case 'discard':\r\n                return 'It is your turn to discard a card'\r\n            case 'pickup':\r\n                return 'It is your turn to pickup a card'\r\n            default:\r\n                return 'It is the computer\\'s turn'\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div style={{margin: '30px'}}>\r\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                <div></div>\r\n                <CardHand hand={gameState.computerHand} gameState={gameState} faceUp={false}/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle className='menu-button'>\r\n                        <Icon path={mdiMenu} size={2} color={\"gray\"}/>\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu className='in-game-menu'>\r\n                        <Dropdown.Item className='menu-item' onClick={() => setGameState(initGameState())}>Reset Game</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n                    <p className='game-text'>Discard Pile</p>\r\n                    { gameState.discard.length > 0 ?\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/cards/blue_back.jpg`} \r\n                            onClick={() => setGameState({...pickupCard(true, gameState)})}\r\n                            alt={cardToString(gameState.discard[gameState.discard.length-1])} \r\n                            style={{maxHeight: 180, margin: 10}}/>\r\n                        : <p style={{margin: 20}}>Empty</p>\r\n                    }\r\n                </div>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly', margin: '10px 100px 10px 100px'}}>\r\n                    <p className='game-text'>{turnText()}</p>\r\n                    <button className=\"game-button\" onClick={\r\n                        () => {\r\n                            setGameState({...computerPlayerTurn(gameState)})\r\n                        }\r\n                    }>End Turn</button>\r\n                </div>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n                    <p className='game-text'>Deck</p>\r\n                    <p className='game-text' style ={{fontSize: '20px'}}>{`Cards Left: ${gameState.deck.length}`}</p>\r\n                    { gameState.deck.length > 0 ?\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/cards/${cardToString(gameState.deck[gameState.deck.length-1])}.jpg`} \r\n                            onClick={() => setGameState({...pickupCard(false, gameState)})}\r\n                            alt={cardToString(gameState.deck[gameState.deck.length-1])} \r\n                            style={{maxHeight: 180, margin: 10}}/>\r\n                        : <p style={{margin: 20}}>Empty</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                <CardHand hand={gameState.userHand} onCardSelect={discardCard} gameState={gameState} setGameState={setGameState} faceUp={true}/>\r\n            </div>    \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction initGameState(): GameState{\r\n    let deck: Card[] = []\r\n\r\n    SUITS.forEach((suit) => {\r\n        CARD_VALUES.forEach((value) => {\r\n            deck.push({value, suit})\r\n        })\r\n    })\r\n\r\n    const userHandFlat = deck.sort(() => Math.random() - Math.random()).slice(0, 10)\r\n\r\n    deck = deck.filter((card) => !userHandFlat.includes(card))\r\n\r\n    const computerHandFlat = deck.sort(() => Math.random() - Math.random()).slice(0, 10)\r\n\r\n    deck = deck.filter((card) => !computerHandFlat.includes(card))\r\n\r\n    const discard = [deck[0]]\r\n    deck = deck.slice(1)\r\n\r\n    const currentStage = STAGES[0] // TODO Should randomly select between computer and player\r\n\r\n    const userHand = buildHand(userHandFlat)\r\n    const computerHand = buildHand(computerHandFlat)\r\n\r\n    return { userHand, computerHand, deck, discard, currentStage }\r\n}\r\n\r\nfunction buildHand(flatHand: Card[]): HandState{\r\n    const sortedHand = flatHand.sort((cardA, cardB) => {\r\n\r\n        const suitAOffset = SUITS.indexOf(cardA.suit) * 13\r\n        const suitBOffset = SUITS.indexOf(cardB.suit) * 13\r\n\r\n        const valA = CARD_VALUES.indexOf(cardA.value)\r\n        const valB = CARD_VALUES.indexOf(cardB.value)\r\n\r\n        return (suitAOffset+valA) - (suitBOffset+valB)\r\n    })\r\n\r\n    const runs: Card[][] = []\r\n\r\n    for(let i = 0; i < sortedHand.length-2; i++){\r\n        const currentRun: Card[] = []\r\n\r\n        if(makesSequence(sortedHand, sortedHand[i])){\r\n            currentRun.push(sortedHand[i])\r\n\r\n            let nextCard = getCardInSequence(sortedHand[i], 1)\r\n            while(!!nextCard && sortedHand.some(card => card.value == nextCard?.value && card.suit == nextCard?.suit) && i < sortedHand.length){\r\n                currentRun.push(nextCard)\r\n                i++\r\n\r\n                nextCard = getCardInSequence(sortedHand[i], 1)\r\n            }\r\n        }\r\n\r\n        if(currentRun.length > 2){\r\n            runs.push(currentRun)\r\n        }\r\n    }\r\n\r\n    const filteredHand = flatHand.filter((card) => !runs.flat().some(flatCard => card.value === flatCard?.value && card.suit === flatCard?.suit))\r\n\r\n    const sets: Card[][] = []\r\n    \r\n    CARD_VALUES.forEach((value) => {\r\n        const set: Card[] = []\r\n        SUITS.forEach((suit) => {\r\n            if(filteredHand.some(card => card.suit === suit && card.value === value)){\r\n                set.push({suit, value})\r\n            }\r\n        })  \r\n        \r\n        if(set.length > 2){\r\n            sets.push(set)\r\n        }\r\n    })\r\n\r\n    const deadwood = filteredHand.filter((card) => !sets.flat().some(flatCard => card.value === flatCard?.value && card.suit === flatCard?.suit))\r\n    \r\n    \r\n    return {sets, runs, deadwood}\r\n}\r\n\r\nfunction discardCard(selectedCard: Card, gameState: GameState): GameState{\r\n\r\n    if(gameState.currentStage === 'discard'){\r\n        const hand = getFlatHand(gameState.userHand)\r\n        const newHand = buildHand(hand.filter((card) => (card.value !== selectedCard.value) || (card.suit !== selectedCard.suit)))\r\n    \r\n        gameState.discard.push(selectedCard)\r\n        gameState.userHand = newHand\r\n        gameState.currentStage = \"computer\"\r\n    }\r\n\r\n    return gameState\r\n}\r\n\r\nfunction pickupCard(faceUp: boolean, gameState: GameState): GameState{\r\n\r\n    if(gameState.currentStage === \"pickup\"){\r\n        const selectedCard = faceUp ? gameState.discard.pop() : gameState.deck.pop()\r\n\r\n        if(selectedCard){\r\n            const hand = getFlatHand(gameState.userHand)\r\n            hand.push(selectedCard)\r\n    \r\n            const handState = buildHand(hand)\r\n            gameState.userHand = handState\r\n            gameState.currentStage = \"discard\"\r\n        }\r\n    }\r\n\r\n    return gameState\r\n}\r\n\r\nfunction computerPlayerTurn(gameState: GameState){\r\n\r\n    // Decide if drawing face up or face down card\r\n    const drawFromDeck = computerDrawCardFromDeck(gameState)\r\n\r\n    console.log(`Starting state for computer`)\r\n    console.log(gameState)\r\n\r\n\r\n    drawFromDeck ? console.log('Computer Drawing from deck') : console.log('Computer Drawing from discard')\r\n\r\n    const drawnCard = drawFromDeck ? gameState.deck.pop() : gameState.discard.pop()\r\n\r\n\r\n    const hand = getFlatHand(gameState.computerHand)\r\n\r\n    if(drawnCard){\r\n        console.log(`Drawn Card: ${cardToString(drawnCard)}`)\r\n\r\n        hand.push(drawnCard)\r\n\r\n        gameState.computerHand = buildHand(hand)   \r\n    }\r\n\r\n    // Evaluate the card to discard that maximizes computer gain while minimizing \r\n    // player gain\r\n    const selectedDiscardCard = evaluateMovesTraditional(gameState)\r\n\r\n    if(typeof selectedDiscardCard === \"string\"){\r\n        console.log('Computer Knocks')\r\n        return {...gameState, knocker: 'computer'}\r\n    }\r\n\r\n    console.log(`Computer discarding: ${cardToString(selectedDiscardCard)}`)\r\n\r\n    // Discard the card\r\n    const discardIndex = hand.indexOf(selectedDiscardCard);\r\n    if (discardIndex > -1) {\r\n       const discarded = hand.splice(discardIndex, 1);\r\n       gameState.discard.push(discarded[0])\r\n    }\r\n\r\n    gameState.computerHand = buildHand(hand)  \r\n\r\n    // Declare knocking if criteria met\r\n    if(shouldKnock(gameState)){\r\n        console.log('Computer Knocks')\r\n        return {...gameState, knocker: 'computer'}\r\n    }\r\n    gameState.currentStage = \"pickup\"\r\n\r\n    return gameState\r\n}\r\n\r\nfunction computerDrawCardFromDeck(gameState: GameState): boolean {\r\n\r\n    if(gameState.discard.length > 0){\r\n        const faceupCard = gameState.discard[gameState.discard.length - 1]\r\n    \r\n        const existingSet = gameState.computerHand.sets.some((set) => set[0].value=== faceupCard.value)\r\n\r\n        const makesSet = gameState.computerHand.deadwood.filter((card) => card.value === faceupCard.value).length > 1\r\n\r\n        const existingRun = gameState.computerHand.runs.some((run) => getCardInSequence(run[run.length-1], 1) === faceupCard || getCardInSequence(run[0], -1) === faceupCard)\r\n    \r\n        if(makesSet || existingSet || existingRun || makesSequence(gameState.computerHand.deadwood, faceupCard)){\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction getValueCount(hand: Card[]): any {\r\n\r\n    const valueCountMap: any = {'A': 0, '2': 0, '3': 0, '4': 0, '5' : 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, 'J': 0, 'Q': 0, 'K': 0}\r\n\r\n    hand.forEach((card) => {\r\n        if(card.value in valueCountMap){\r\n            valueCountMap[card.value] += 1 \r\n        }\r\n    })\r\n\r\n    return valueCountMap\r\n}\r\n\r\nfunction makesSequence(hand: Card[], card: Card): boolean{\r\n\r\n    if(card.value !== 'A' && card.value !== '2'){\r\n        const prev1 = getCardInSequence(card, -1)\r\n        const prev2 =  getCardInSequence(card, -2)\r\n\r\n        if(prev1 && prev2 && hand.some(card1 => cardToString(card1) === cardToString(prev1)) &&  hand.some(card2 => cardToString(card2) === cardToString(prev2))){\r\n            return true\r\n        }\r\n    }\r\n\r\n    if(card.value !== 'K' && card.value !== 'Q'){\r\n        const next1 = getCardInSequence(card, 1)\r\n        const next2 =  getCardInSequence(card, 2)\r\n\r\n        if(next1 && next2 && hand.some(card1 => cardToString(card1) === cardToString(next1)) && hand.some(card2 => cardToString(card2) === cardToString(next2))){\r\n            return true\r\n        }\r\n    }\r\n\r\n    const prev1 = getCardInSequence(card, -1)\r\n    const next1 = getCardInSequence(card, 1)\r\n\r\n    if(prev1 && next1 && hand.some(card1 => cardToString(card1) === cardToString(prev1)) && hand.some(card1 => cardToString(card1) === cardToString(next1))){\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction evaluateMovesTraditional(gameState: GameState): Card | string{\r\n\r\n    const valueCount = getValueCount(gameState.computerHand.deadwood)\r\n    const highValueCardCount = valueCount['10'] + valueCount['J'] + valueCount['Q'] + valueCount['K']\r\n\r\n    // If half of deck expended start getting rid of high value cards if there are any in hand\r\n    if(gameState.deck.length < 16 && highValueCardCount > 0){\r\n        const maxCard = gameState.computerHand.deadwood.sort((cardA, cardB) =>  CARD_VALUES.indexOf(cardA.value) - CARD_VALUES.indexOf(cardB.value)).pop()\r\n\r\n        return maxCard ? maxCard : 'knock'\r\n    } \r\n\r\n    // Ranks cards by their likelyhood to contribute to a future set/run\r\n    // Discard lowest of these\r\n    const rankedHand = rankCardUtility(gameState.computerHand.deadwood)\r\n\r\n    const selectedCard = rankedHand.pop()?.card\r\n\r\n    return selectedCard ? selectedCard : 'knock'\r\n}\r\n\r\nfunction shouldKnock(gameState: GameState): boolean {\r\n    // TODO extend for other situations\r\n    if(gameState.computerHand.deadwood.length === 1){\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction rankCardUtility(deadwood: Card[]): Utility[]{\r\n\r\n    // +1 for every copy of the card\r\n    // +1 for every card in sequence\r\n    // +1 if part of trio\r\n    // -1 if greater than 9\r\n    // +1 if A or 2\r\n\r\n    const cardValueCount = getValueCount(deadwood)\r\n\r\n    const cardRanking = deadwood.map((card) =>{\r\n        let score = 0\r\n        let preSet = false\r\n        let preRun = false\r\n\r\n        if(cardValueCount[card.value] > 1){\r\n            score += (cardValueCount[card.value] - 1)\r\n            preSet = true\r\n        }\r\n\r\n        const nextCard = getCardInSequence(card, 1)\r\n        const prevCard = getCardInSequence(card, -1)\r\n\r\n        if((nextCard && deadwood.some(card1 => cardToString(card1) === cardToString(nextCard))) || (prevCard && deadwood.some(card1 => cardToString(card1) === cardToString(prevCard)))){\r\n            score += 1\r\n            preRun = true\r\n        }\r\n\r\n        if(preRun && preSet){\r\n            score += 1\r\n        }\r\n\r\n        if(CARD_VALUES.indexOf(card.value) > 8){\r\n            score--\r\n        } else if(CARD_VALUES.indexOf(card.value) < 2){\r\n            score++\r\n        }\r\n\r\n        return {card, score}\r\n    }).sort((cardUtilityA, cardUtilityB) => cardUtilityB.score - cardUtilityA.score)\r\n\r\n    console.log(cardRanking)\r\n\r\n    return cardRanking\r\n}\r\n\r\n// TODO different heuristic ","import './App.css';\nimport { GameManager } from './GameManager';\n\nfunction App() {\n  return (\n    <>\n      <h1 style={{fontFamily: 'Lato',\n                  fontSize: '80px',\n                  color: '#F1FAEE',\n                  backgroundColor:\"#457B9D\",\n                  margin:\"0\",\n                  textAlign: 'center',\n                  padding: '20px'}}>Gin Rummy</h1>\n      <GameManager/>\n    </>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}