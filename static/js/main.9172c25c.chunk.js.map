{"version":3,"sources":["Constants.ts","CardHand.tsx","GameManager.tsx","App.js","reportWebVitals.js","index.js"],"names":["SUITS","CARD_VALUES","NULL_GAME","userHand","sets","runs","deadwood","computerHand","deck","discard","currentStage","userGameScore","computerGameScore","discardMemory","playerPickup","ginBonus","undercutBonus","EARLY_GAME_COEFFICIENTS","runScore","setScore","trioScore","discardedPenalty","pickedPenalty","valueBonus","MID_GAME_COEFFICIENTS","LATE_GAME_COEFFICIENTS","CardHand","props","gameState","setGameState","onCardSelect","hand","faceUp","getFlatHand","map","card","onClick","console","log","src","process","cardToString","alt","style","maxHeight","margin","className","marginLeft","calculateDeadwood","undefined","score","forEach","cardScore","indexOf","value","flat","concat","getCardInSequence","offset","nextValue","suit","nameOfCard","GameManager","useState","useEffect","length","winner","drawFromDeck","faceupCard","existingSet","some","set","makesSet","filter","existingRun","run","makesSequence","computerDrawCardFromDeck","computerMoves","push","drawnCard","pop","buildHand","possibleDiscardCard","valueCount","getValueCount","highValueCardCount","maxCard","sort","cardA","cardB","rankedHand","rankCardUtility","selectedCard","evaluateMovesTraditional","selectedDiscardCard","discardIndex","discarded","splice","deadwoodScore","shouldKnock","knock","computerPlayerTurn","initGameState","gameWon","gameScoreLimit","Modal","show","backdrop","size","centered","Dialog","Body","Footer","Button","variant","onExit","display","justifyContent","Dropdown","Toggle","path","mdiMenu","color","Menu","Item","flexDirection","alignItems","pickupCard","move","turnText","starter","startNextRound","fontSize","discardCard","marginTop","alert","suggestedCard","discardSuggestion","startStage","userHandFlat","Math","random","slice","computerHandFlat","includes","flatHand","sortedHand","suitAOffset","suitBOffset","i","currentRun","nextCard","filteredHand","flatCard","newHand","handState","valueCountMap","prev1","prev2","card1","card2","next1","next2","cardValueCount","rememberDiscard","coefficients","preSet","preRun","prevCard","picked","cardUtilityA","cardUtilityB","user","playerScore","computerScore","tempDeadwood","inSet","extendsRun","updatedPlayerScore","updatedComputerScore","layoff","App","gameStarted","setGameStarted","setDiscardMemory","setGameScoreLimit","setGinBonus","setUndercutBonus","fontFamily","backgroundColor","textAlign","padding","minHeight","marginRight","type","maxWidth","onChange","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9172c25c.chunk.js","sourcesContent":["export const SUITS = ['S', 'C', 'H', 'D']\r\n\r\nexport const CARD_VALUES = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\r\n\r\nexport const STAGES = ['pickup', 'discard', 'knock', 'computer', 'endround']\r\n\r\nconst colors = [\"e63946\",\"f1faee\",\"a8dadc\",\"457b9d\",\"1d3557\"]\r\n\r\nexport const GAME_SCORE_LIMIT = 100\r\n\r\nexport const GIN_BONUS = 25\r\n\r\nexport const UNDERCUT_BONUS = 25\r\n\r\nexport const NULL_GAME = {\r\n    userHand: {sets: [], runs: [], deadwood: []},\r\n    computerHand: {sets: [], runs: [], deadwood: []},\r\n    deck: [],\r\n    discard: [],\r\n    currentStage: '',\r\n    userGameScore: 0,\r\n    computerGameScore: 0,\r\n    discardMemory: 10,\r\n    playerPickup: [],\r\n    ginBonus: GIN_BONUS,\r\n    undercutBonus: UNDERCUT_BONUS\r\n} \r\n\r\nexport const EARLY_GAME_COEFFICIENTS = {\r\n    runScore: 7.800000000000001,\r\n    setScore: 7.5,\r\n    trioScore: 12.8,\r\n    discardedPenalty: -5.5,\r\n    pickedPenalty: -4.6000000000000005,\r\n    valueBonus: 1.4000000000000001\r\n}\r\n\r\nexport const MID_GAME_COEFFICIENTS =  {\r\n    runScore: 1.5,\r\n    setScore: 0,\r\n    trioScore: 4.699999999999999,\r\n    discardedPenalty: -7.9,\r\n    pickedPenalty: -8.6,\r\n    valueBonus: 5.199999999999999\r\n}\r\n\r\nexport const LATE_GAME_COEFFICIENTS =  {\r\n    runScore: 0.6,\r\n    setScore: 6.2,\r\n    trioScore: 4.5,\r\n    discardedPenalty: -0.09999999999999964,\r\n    pickedPenalty: -2.1,\r\n    valueBonus: 12.6\r\n}","import { CARD_VALUES } from \"./Constants\"\r\nimport { GameState } from \"./GameManager\"\r\n\r\nexport type Card = {\r\n    value: string\r\n    suit: string\r\n}\r\n\r\nexport type HandState = {\r\n    sets: Card[][]\r\n    runs: Card[][]\r\n    deadwood: Card[]\r\n}\r\n\r\nexport function CardHand(props: {hand: HandState,\r\n                                 onCardSelect?: (selectedCard: Card, gameState: GameState) => GameState,\r\n                                 gameState: GameState,\r\n                                 setGameState?: any,\r\n                                 faceUp: boolean}){\r\n    const {gameState, setGameState, onCardSelect, hand, faceUp} = props\r\n    return (\r\n        <div>\r\n            <div>\r\n                {getFlatHand(props.hand).map((card) => {\r\n                    return <img \r\n                            onClick={() => onCardSelect && setGameState ? setGameState({...onCardSelect(card, gameState)}) : console.log(\"You cannot discard an opponent's card\")} \r\n                            src={faceUp ? `${process.env.PUBLIC_URL}/cards/${cardToString(card)}.jpg` : `${process.env.PUBLIC_URL}/cards/blue_back.jpg`} \r\n                            alt={cardToString(card)} \r\n                            style={{maxHeight: 180, margin: 10}} \r\n                            key={cardToString(card)}/>\r\n                })}\r\n            </div>\r\n            {faceUp ? <p className='game-text' style={{marginLeft: '20px'}}>Score: {calculateDeadwood(hand.deadwood)}</p> : undefined}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function calculateDeadwood(deadwood: Card[]): number{\r\n    let score = 0\r\n\r\n    deadwood.forEach((card) => {\r\n        const cardScore = CARD_VALUES.indexOf(card.value) + 1\r\n        score += (cardScore > 9 ? 10 : cardScore)\r\n    })\r\n\r\n    return score\r\n}\r\n\r\nexport function getFlatHand(hand: HandState): Card[]{\r\n    return hand.sets.flat().concat(hand.runs.flat(), hand.deadwood)\r\n}\r\n\r\nexport function getCardInSequence(card: Card, offset = 1): Card | null {\r\n    const nextValue = CARD_VALUES[CARD_VALUES.indexOf(card.value) + offset]\r\n    if(!nextValue){\r\n        return null\r\n    }\r\n\r\n    return {value: nextValue, suit: card.suit}\r\n}\r\n\r\nexport function cardToString(card: Card): string{\r\n    return `${card.value}${card.suit}`\r\n}\r\n\r\nexport function nameOfCard(card: Card): string{\r\n    const suit = () => {\r\n        switch(card.suit){\r\n            case 'H':\r\n                return 'Hearts'\r\n            case 'D':\r\n                return 'Diamonds'\r\n            case 'S':\r\n                return 'Spades'\r\n            default:\r\n                return 'Clubs'\r\n    }}\r\n\r\n    const value = () => {\r\n        switch(card.value){\r\n            case 'A':\r\n                return 'Ace'\r\n            case 'K':\r\n                return 'King'\r\n            case 'Q':\r\n                return 'Queen'\r\n            case 'J':\r\n                return 'Jack'\r\n            default:\r\n                return card.value\r\n    }}\r\n\r\n    return `${value()} of ${suit()}`\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { CARD_VALUES, SUITS, NULL_GAME, EARLY_GAME_COEFFICIENTS, LATE_GAME_COEFFICIENTS, MID_GAME_COEFFICIENTS } from \"./Constants\";\r\nimport _ from 'lodash';\r\nimport { CardHand, getFlatHand, getCardInSequence, HandState, Card, cardToString, calculateDeadwood, nameOfCard } from \"./CardHand\";\r\nimport Icon from '@mdi/react'\r\nimport { mdiMenu } from '@mdi/js'\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n\r\nexport type GameState = {\r\n    userHand: HandState\r\n    computerHand: HandState\r\n    deck: Card[]\r\n    discard: Card[]\r\n    currentStage: string\r\n    winner?: string\r\n    computerMoves?: string[]\r\n    userGameScore: number\r\n    computerGameScore: number\r\n    discardMemory: number\r\n    playerPickup: Card[]\r\n    ginBonus: number\r\n    undercutBonus: number\r\n}\r\n\r\ntype Utility = {\r\n    card: Card\r\n    score: number\r\n}\r\n\r\nexport function GameManager(props: {onExit: (toggle: boolean) => void,\r\n                                    discardMemory: number,\r\n                                    ginBonus: number,\r\n                                    undercutBonus: number,\r\n                                    gameScoreLimit: number}){\r\n\r\n    const [gameState, setGameState] = useState<GameState>(NULL_GAME)\r\n\r\n    useEffect(()=> {\r\n        if(gameState.deck.length < 3 && gameState.winner !== 'No one'){\r\n            setGameState({...gameState, winner: 'No one', currentStage: 'endround'})\r\n        } else if(gameState.currentStage === 'computer'){\r\n            setGameState({...computerPlayerTurn(gameState)})\r\n        }\r\n    }, [gameState])\r\n\r\n    useEffect(() => setGameState({...initGameState(props.discardMemory, props.ginBonus, props.undercutBonus)}),\r\n                                 [props.discardMemory, props.ginBonus, props.undercutBonus])\r\n\r\n    const turnText = () => {\r\n        switch(gameState.currentStage){\r\n            case 'discard':\r\n                return 'Click on the card you want to discard'\r\n            case 'pickup':\r\n                return 'Click on the card you want to pick up'\r\n            case 'knock':\r\n                return 'Do you want to knock?'\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const gameWon = gameState.userGameScore >= props.gameScoreLimit || gameState.computerGameScore >= props.gameScoreLimit\r\n\r\n    return(\r\n        <div style={{margin: '30px'}}>\r\n            <Modal show={gameWon} backdrop=\"static\" size=\"lg\" centered>\r\n                <Modal.Dialog>\r\n                    <Modal.Body>\r\n                        <p className='game-text'>{`${gameState.winner ?? ''} won the game`}</p>\r\n                        <p className='game-text'>Do you want to play again?</p>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={() => setGameState(initGameState(props.discardMemory, props.ginBonus, props.undercutBonus))}>Yes</Button>\r\n                        <Button variant=\"secondary\" onClick={() => props.onExit(false)}>No</Button>\r\n                    </Modal.Footer>\r\n                </Modal.Dialog>\r\n            </Modal>\r\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                <div></div>\r\n                <CardHand hand={gameState.computerHand} gameState={gameState} faceUp={!!gameState.winner}/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"outline-primary\">\r\n                        <Icon path={mdiMenu} size={2} color={\"gray\"}/>\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item  onClick={() => setGameState(initGameState(props.discardMemory, props.ginBonus, props.undercutBonus))}>Reset Game</Dropdown.Item>\r\n                        <Dropdown.Item  onClick={() => props.onExit(false)}>Exit Game</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n                    <p className='game-text'>Discard Pile</p>\r\n                    { gameState.discard.length > 0 ?\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/cards/${cardToString(gameState.discard[gameState.discard.length-1])}.jpg`} \r\n                            onClick={() => setGameState({...pickupCard(true, gameState)})}\r\n                            alt={cardToString(gameState.discard[gameState.discard.length-1])} \r\n                            style={{maxHeight: 180, margin: 10}}/>\r\n                        : <p style={{margin: 20}}>Empty</p>\r\n                    }\r\n                </div>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly', margin: '10px 100px 10px 100px'}}>\r\n                    {(gameState.currentStage === 'pickup' && gameState.computerMoves) ? gameState.computerMoves.map((move) => <p className='game-text'>{move}</p>) : undefined}\r\n                    <p className='game-text'>{turnText()}</p>\r\n                    {gameState.currentStage === 'knock' ? \r\n                        <div>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...knock(gameState, true)})}>Knock</button>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...gameState, currentStage: 'computer'})}>End Turn</button>  \r\n                        </div> :\r\n                        undefined\r\n                    }\r\n                    {\r\n                        gameState.currentStage === 'endround' ? \r\n                        <>\r\n                            <p className='game-text'>{`${gameState.winner ?? ''} won that round`}</p>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...startNextRound(gameState)})}>End Round</button>\r\n                        </> :\r\n                        undefined\r\n                    }  \r\n                </div>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n                    <p className='game-text'>Deck</p>\r\n                    <p className='game-text' style ={{fontSize: '20px'}}>{`Cards Left: ${gameState.deck.length}`}</p>\r\n                    { gameState.deck.length > 0 ?\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/cards/blue_back.jpg`} \r\n                            onClick={() => setGameState({...pickupCard(false, gameState)})}\r\n                            alt={cardToString(gameState.deck[gameState.deck.length-1])} \r\n                            style={{maxHeight: 180, margin: 10}}/>\r\n                        : <p style={{margin: 20}}>Empty</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                <CardHand hand={gameState.userHand} onCardSelect={discardCard} gameState={gameState} setGameState={setGameState} faceUp={true}/>\r\n            </div>   \r\n\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around', marginTop: '40px'}}>\r\n                <p className='game-text'>{`Player Game Score: ${gameState.userGameScore}`}</p>\r\n                <p className='game-text'>{`Computer Game Score: ${gameState.computerGameScore}`}</p>\r\n            </div> \r\n\r\n            {gameState.currentStage === 'discard' &&\r\n             <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                 <button className=\"game-button\" onClick={() => alert(`Suggested Discard: ${discardSuggestion(gameState)}`)}>Hint</button> \r\n             </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction initGameState(discardMemory: number, ginBonus:number, undercutBonus: number, startStage?: string): GameState{\r\n    let deck: Card[] = []\r\n\r\n    SUITS.forEach((suit) => {\r\n        CARD_VALUES.forEach((value) => {\r\n            deck.push({value, suit})\r\n        })\r\n    })\r\n\r\n    const userHandFlat = deck.sort(() => Math.random() - Math.random()).slice(0, 10)\r\n\r\n    deck = deck.filter((card) => !userHandFlat.includes(card))\r\n\r\n    const computerHandFlat = deck.sort(() => Math.random() - Math.random()).slice(0, 10)\r\n\r\n    deck = deck.filter((card) => !computerHandFlat.includes(card))\r\n\r\n    const discard = [deck[0]]\r\n    deck = deck.slice(1)\r\n\r\n    console.log(startStage)\r\n    const currentStage = startStage ?? (Math.random() > 0.5 ? 'computer' : 'pickup') \r\n    console.log(currentStage)\r\n\r\n    const userHand = buildHand(userHandFlat)\r\n    const computerHand = buildHand(computerHandFlat)\r\n\r\n    const userGameScore = 0\r\n    const computerGameScore = 0\r\n\r\n    console.log({ userHand, computerHand, deck, discard, currentStage, userGameScore, computerGameScore })\r\n\r\n    return { \r\n            userHand,\r\n            computerHand,\r\n            deck, discard,\r\n            currentStage,\r\n            userGameScore,\r\n            computerGameScore,\r\n            discardMemory,\r\n            ginBonus,\r\n            undercutBonus,\r\n            playerPickup: []}\r\n}\r\n\r\nfunction startNextRound(gameState: GameState): GameState {\r\n    const userGameScore = gameState.userGameScore\r\n    const computerGameScore = gameState.computerGameScore\r\n\r\n    const starter = gameState.winner === 'You' ? 'pickup' : 'computer'\r\n\r\n    return {...initGameState(gameState.discardMemory, gameState.ginBonus, gameState.undercutBonus, starter), computerGameScore, userGameScore}\r\n}\r\n\r\nfunction buildHand(flatHand: Card[]): HandState{\r\n    const sortedHand = flatHand.sort((cardA, cardB) => {\r\n\r\n        const suitAOffset = SUITS.indexOf(cardA.suit) * 13\r\n        const suitBOffset = SUITS.indexOf(cardB.suit) * 13\r\n\r\n        const valA = CARD_VALUES.indexOf(cardA.value)\r\n        const valB = CARD_VALUES.indexOf(cardB.value)\r\n\r\n        return (suitAOffset+valA) - (suitBOffset+valB)\r\n    })\r\n\r\n    const runs: Card[][] = []\r\n\r\n    for(let i = 0; i < sortedHand.length-2; i++){\r\n        const currentRun: Card[] = []\r\n\r\n        if(makesSequence(sortedHand, sortedHand[i])){\r\n            currentRun.push(sortedHand[i])\r\n\r\n            let nextCard = getCardInSequence(sortedHand[i], 1)\r\n            while(!!nextCard && sortedHand.some(card => card.value == nextCard?.value && card.suit == nextCard?.suit) && i < sortedHand.length){\r\n                currentRun.push(nextCard)\r\n                i++\r\n\r\n                nextCard = getCardInSequence(sortedHand[i], 1)\r\n            }\r\n        }\r\n\r\n        if(currentRun.length > 2){\r\n            runs.push(currentRun)\r\n        }\r\n    }\r\n\r\n    const filteredHand = flatHand.filter((card) => !runs.flat().some(flatCard => card.value === flatCard?.value && card.suit === flatCard?.suit))\r\n\r\n    const sets: Card[][] = []\r\n    \r\n    CARD_VALUES.forEach((value) => {\r\n        const set: Card[] = []\r\n        SUITS.forEach((suit) => {\r\n            if(filteredHand.some(card => card.suit === suit && card.value === value)){\r\n                set.push({suit, value})\r\n            }\r\n        })  \r\n        \r\n        if(set.length > 2){\r\n            sets.push(set)\r\n        }\r\n    })\r\n\r\n    const deadwood = filteredHand.filter((card) => !sets.flat().some(flatCard => card.value === flatCard?.value && card.suit === flatCard?.suit))\r\n\r\n    /*sets.forEach((set) => {\r\n        if(set.filter(card => !!card).length > 3){\r\n            console.log(set)\r\n            const extraCard = set.find(card => makesSequence(deadwood, card))\r\n\r\n            if(extraCard){\r\n                const extraCardIndex = set.findIndex((card) => card.value === extraCard.value)\r\n                set.splice(extraCardIndex, 1)\r\n\r\n                const newSequence = () => {\r\n                    switch(extraCard.value){\r\n                        case 'K':\r\n                            return [getCardInSequence(extraCard, -2), getCardInSequence(extraCard, -1), extraCard]\r\n                        case 'A':\r\n                            return [extraCard, getCardInSequence(extraCard, 1), getCardInSequence(extraCard, 2)]\r\n                        default:\r\n                            return [getCardInSequence(extraCard, -1), extraCard, getCardInSequence(extraCard, 1)]\r\n                    }\r\n                }\r\n\r\n                const newRun: Card[] = []\r\n\r\n                newSequence().forEach((card) => {\r\n                    if(card){\r\n                        newRun.push(card)\r\n                        const deadIndex = deadwood.findIndex(deadCard => deadCard.value === card.value && deadCard.suit === card.suit)\r\n                        if(deadIndex > -1){\r\n                            deadwood.splice(deadIndex, 1)\r\n                        }\r\n                    }\r\n                })\r\n\r\n                runs.push(newRun)\r\n            }\r\n        }\r\n    }) \r\n\r\n    const deadwoodCardCount = getValueCount(deadwood)\r\n    console.log(sets)\r\n    console.log(runs)\r\n    runs.forEach((run) => {\r\n        if(run.filter(card => !!card).length > 3){\r\n            console.log(run)\r\n            const extraCard = run.find(card => deadwoodCardCount[card.value] > 1 && [0, run.length-1].includes(run.findIndex(runCard => runCard.value === card.value && runCard.suit === card.suit)))\r\n                \r\n            if(extraCard){\r\n                const extraCardIndex = run.findIndex((card) => card.value === extraCard.value)\r\n                run.splice(extraCardIndex, 1)\r\n\r\n                const newSet = deadwood.filter(card => card.value === extraCard.value)\r\n                newSet.push(extraCard)\r\n                sets.push(newSet)\r\n            }\r\n        }\r\n    })*/\r\n    \r\n    return {sets, runs, deadwood}\r\n}\r\n\r\nfunction discardCard(selectedCard: Card, gameState: GameState): GameState{\r\n\r\n    if(gameState.currentStage === 'discard'){\r\n        const hand = getFlatHand(gameState.userHand)\r\n        const newHand = buildHand(hand.filter((card) => (card.value !== selectedCard.value) || (card.suit !== selectedCard.suit)))\r\n    \r\n        gameState.discard.push(selectedCard)\r\n        gameState.userHand = newHand\r\n        \r\n        gameState.currentStage = calculateDeadwood(gameState.userHand.deadwood) > 10 ? \"computer\" : \"knock\"\r\n    }\r\n\r\n    return gameState\r\n}\r\n\r\nfunction pickupCard(faceUp: boolean, gameState: GameState): GameState{\r\n\r\n    if(gameState.currentStage === \"pickup\"){\r\n        const selectedCard = faceUp ? gameState.discard.pop() : gameState.deck.pop()\r\n\r\n        if(selectedCard){\r\n            const hand = getFlatHand(gameState.userHand)\r\n            hand.push(selectedCard)\r\n    \r\n            const handState = buildHand(hand)\r\n            gameState.userHand = handState\r\n            gameState.currentStage = \"discard\"\r\n            gameState.playerPickup.push(selectedCard)\r\n        }\r\n    }\r\n\r\n    return gameState\r\n}\r\n\r\nfunction computerPlayerTurn(gameState: GameState){\r\n\r\n    // Decide if drawing face up or face down card\r\n    const drawFromDeck = computerDrawCardFromDeck(gameState)\r\n\r\n    const computerMoves = []\r\n\r\n    drawFromDeck ? computerMoves.push('Computer drew from deck') : computerMoves.push('Computer drew from discard')\r\n\r\n    const drawnCard = drawFromDeck ? gameState.deck.pop() : gameState.discard.pop()\r\n\r\n    const hand = getFlatHand(gameState.computerHand)\r\n\r\n    if(drawnCard){\r\n        hand.push(drawnCard)\r\n\r\n        gameState.computerHand = buildHand(hand)   \r\n    }\r\n\r\n    // Evaluate the card to discard that maximizes computer gain while minimizing \r\n    // player gain\r\n    const possibleDiscardCard = evaluateMovesTraditional(gameState)\r\n    const selectedDiscardCard  = typeof possibleDiscardCard === \"string\" && drawnCard ? drawnCard : possibleDiscardCard\r\n\r\n    if(typeof selectedDiscardCard != 'string'){\r\n        computerMoves.push(`Opponent discarded the ${nameOfCard(selectedDiscardCard)}`) \r\n\r\n        // Discard the card\r\n        const discardIndex = hand.indexOf(selectedDiscardCard);\r\n        if (discardIndex > -1) {\r\n            const discarded = hand.splice(discardIndex, 1);\r\n            gameState.discard.push(discarded[0])\r\n        }\r\n    }\r\n\r\n    gameState.computerHand = buildHand(hand)  \r\n\r\n    // Declare knocking if criteria met\r\n    if(shouldKnock(gameState)){\r\n        return knock(gameState, false)\r\n    }\r\n    gameState.currentStage = \"pickup\"\r\n    gameState.computerMoves = computerMoves\r\n\r\n    return gameState\r\n}\r\n\r\nfunction computerDrawCardFromDeck(gameState: GameState): boolean {\r\n\r\n    if(gameState.discard.length > 0){\r\n        const faceupCard = gameState.discard[gameState.discard.length - 1]\r\n    \r\n        const existingSet = gameState.computerHand.sets.some((set) => set[0].value=== faceupCard.value)\r\n\r\n        const makesSet = gameState.computerHand.deadwood.filter((card) => card.value === faceupCard.value).length > 1\r\n\r\n        const existingRun = gameState.computerHand.runs.some((run) => getCardInSequence(run[run.length-1], 1) === faceupCard || getCardInSequence(run[0], -1) === faceupCard)\r\n    \r\n        if(makesSet || existingSet || existingRun || makesSequence(gameState.computerHand.deadwood, faceupCard)){\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction getValueCount(hand: Card[]): any {\r\n\r\n    const valueCountMap: any = {'A': 0, '2': 0, '3': 0, '4': 0, '5' : 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, 'J': 0, 'Q': 0, 'K': 0}\r\n\r\n    hand.forEach((card) => {\r\n        if(card.value in valueCountMap){\r\n            valueCountMap[card.value] += 1 \r\n        }\r\n    })\r\n\r\n    return valueCountMap\r\n}\r\n\r\nfunction makesSequence(hand: Card[], card: Card): boolean{\r\n\r\n    if(card.value !== 'A' && card.value !== '2'){\r\n        const prev1 = getCardInSequence(card, -1)\r\n        const prev2 =  getCardInSequence(card, -2)\r\n\r\n        if(prev1 && prev2 && hand.some(card1 => cardToString(card1) === cardToString(prev1)) &&  hand.some(card2 => cardToString(card2) === cardToString(prev2))){\r\n            return true\r\n        }\r\n    }\r\n\r\n    if(card.value !== 'K' && card.value !== 'Q'){\r\n        const next1 = getCardInSequence(card, 1)\r\n        const next2 =  getCardInSequence(card, 2)\r\n\r\n        if(next1 && next2 && hand.some(card1 => cardToString(card1) === cardToString(next1)) && hand.some(card2 => cardToString(card2) === cardToString(next2))){\r\n            return true\r\n        }\r\n    }\r\n\r\n    const prev1 = getCardInSequence(card, -1)\r\n    const next1 = getCardInSequence(card, 1)\r\n\r\n    if(prev1 && next1 && hand.some(card1 => cardToString(card1) === cardToString(prev1)) && hand.some(card1 => cardToString(card1) === cardToString(next1))){\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction evaluateMovesTraditional(gameState: GameState): Card | string{\r\n\r\n    const valueCount = getValueCount(gameState.computerHand.deadwood)\r\n    const highValueCardCount = valueCount['10'] + valueCount['J'] + valueCount['Q'] + valueCount['K']\r\n\r\n    // If half of deck expended start getting rid of high value cards if there are any in hand\r\n    if(gameState.deck.length < 20 && highValueCardCount > 0){\r\n        const maxCard = gameState.computerHand.deadwood.sort((cardA, cardB) =>  CARD_VALUES.indexOf(cardA.value) - CARD_VALUES.indexOf(cardB.value)).pop()\r\n\r\n        return maxCard ? maxCard : 'knock'\r\n    } \r\n\r\n    // Ranks cards by their likelyhood to contribute to a future set/run\r\n    // Discard lowest of these\r\n    const rankedHand = rankCardUtility(gameState)\r\n\r\n    const selectedCard = rankedHand.pop()?.card\r\n\r\n    return selectedCard ? selectedCard : 'knock'\r\n}\r\n\r\nfunction shouldKnock(gameState: GameState): boolean {\r\n    // TODO extend for other situations\r\n    const deadwoodScore = calculateDeadwood(gameState.computerHand.deadwood)\r\n\r\n    if(deadwoodScore < 3){\r\n        return true\r\n    } else if(deadwoodScore < 7 && gameState.deck.length > 18){\r\n        return true\r\n    } else if(deadwoodScore <= 10 && gameState.deck.length > 25){\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction rankCardUtility(gameState: GameState): Utility[]{\r\n\r\n    const {computerHand, playerPickup, discardMemory} = gameState\r\n\r\n    const deadwood = gameState.currentStage !== 'computer' ? gameState.userHand.deadwood : computerHand.deadwood\r\n\r\n    const cardValueCount = getValueCount(deadwood)\r\n\r\n    const rememberDiscard = gameState.discard.length >= discardMemory ? gameState.discard.slice(gameState.discard.length-discardMemory) : []\r\n\r\n    const coefficients = gameState.deck.length < 10 ? LATE_GAME_COEFFICIENTS : (gameState.deck.length < 20 ? MID_GAME_COEFFICIENTS : EARLY_GAME_COEFFICIENTS)\r\n    \r\n    const cardRanking = deadwood.map((card) =>{\r\n        let score = 0\r\n        let preSet = false\r\n        let preRun = false\r\n\r\n        if(cardValueCount[card.value] > 1){\r\n            score += coefficients.setScore\r\n            preSet = true\r\n        }\r\n\r\n        const nextCard = getCardInSequence(card, 1)\r\n        const prevCard = getCardInSequence(card, -1)\r\n\r\n        if((nextCard && deadwood.some(card1 => cardToString(card1) === cardToString(nextCard))) || (prevCard && deadwood.some(card1 => cardToString(card1) === cardToString(prevCard)))){\r\n            score += coefficients.runScore\r\n            preRun = true\r\n        }\r\n\r\n        if(preRun && preSet){\r\n            score += coefficients.trioScore\r\n        }\r\n\r\n        if(gameState.currentStage === 'computer'){\r\n            rememberDiscard.forEach((discarded) => {\r\n                if(discarded.value === card.value){\r\n                    score += coefficients.discardedPenalty\r\n                } else if(discarded.suit === card.suit && (getCardInSequence(card, 1)?.value === discarded.value || getCardInSequence(card, -1)?.value === discarded.value)){\r\n                    score += coefficients.discardedPenalty\r\n                }\r\n            })\r\n\r\n            playerPickup.forEach((picked) => {\r\n                if(picked.value === card.value){\r\n                    score += coefficients.pickedPenalty\r\n                } else if(picked.suit === card.suit && (getCardInSequence(card, 1)?.value === picked.value || getCardInSequence(card, -1)?.value === picked.value)){\r\n                    score += coefficients.pickedPenalty\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        score -= (CARD_VALUES.indexOf(card.value) + 1)/coefficients.valueBonus\r\n\r\n        return {card, score}\r\n    }).sort((cardUtilityA, cardUtilityB) => cardUtilityB.score - cardUtilityA.score)\r\n\r\n    return cardRanking\r\n}\r\n\r\nfunction knock(gameState: GameState, user: boolean): GameState{\r\n\r\n    gameState.currentStage = 'endround'\r\n\r\n    const playerScore = calculateDeadwood(gameState.userHand.deadwood)\r\n    const computerScore = calculateDeadwood(gameState.computerHand.deadwood)\r\n\r\n    if(user && (playerScore === 0)){\r\n        return {...gameState, userGameScore: gameState.userGameScore + computerScore + gameState.ginBonus, winner: 'You'}\r\n    } else if(!user && (computerScore === 0)){\r\n        return {...gameState, computerGameScore:  gameState.computerGameScore + playerScore+gameState.ginBonus, winner: 'Your Opponent'}\r\n    }\r\n\r\n    const {updatedPlayerScore, updatedComputerScore} = layoff(gameState, user)\r\n\r\n    if(user && (updatedPlayerScore < updatedComputerScore)){\r\n        return {...gameState, userGameScore: gameState.userGameScore + updatedComputerScore - updatedPlayerScore, winner: 'You'}\r\n    } else if(user && (updatedPlayerScore > updatedComputerScore)){\r\n        return {...gameState, computerGameScore: gameState.computerGameScore + updatedPlayerScore - updatedComputerScore + gameState.undercutBonus,  winner: 'Your Opponent'}\r\n    } else if(!user && (updatedPlayerScore < updatedComputerScore)){\r\n        return {...gameState, userGameScore:   gameState.userGameScore + updatedComputerScore - updatedPlayerScore + gameState.undercutBonus,  winner: 'You'}\r\n    } else {\r\n        return {...gameState, computerGameScore:  gameState.computerGameScore + updatedPlayerScore - updatedComputerScore,  winner: 'Your Opponent'}\r\n    }\r\n}\r\n\r\nfunction layoff(gameState: GameState, user: boolean): {updatedPlayerScore: number, updatedComputerScore: number}{\r\n\r\n    if(user){\r\n        const tempDeadwood = gameState.computerHand.deadwood.filter((card) => {\r\n            const inSet = gameState.userHand.sets.some((set) => set[0].value === card.value)\r\n            const extendsRun = gameState.userHand.runs.some((run) => makesSequence(run, card))\r\n            return !inSet && !extendsRun\r\n        })\r\n\r\n        return {updatedPlayerScore: calculateDeadwood(gameState.userHand.deadwood), updatedComputerScore: calculateDeadwood(tempDeadwood)}\r\n    } else {\r\n        const tempDeadwood = gameState.userHand.deadwood.filter((card) => {\r\n            const inSet = gameState.computerHand.sets.some((set) => set[0].value === card.value)\r\n            const extendsRun = gameState.computerHand.runs.some((run) => makesSequence(run, card))\r\n            return !inSet && !extendsRun\r\n        })\r\n\r\n        return {updatedPlayerScore: calculateDeadwood(tempDeadwood), updatedComputerScore: calculateDeadwood(gameState.computerHand.deadwood)}\r\n    }\r\n}\r\n\r\nfunction discardSuggestion(gameState: GameState): string{\r\n    const userHandUtility = rankCardUtility(gameState)\r\n\r\n    const suggestedCard = userHandUtility.pop()\r\n\r\n    if(!suggestedCard){\r\n        return 'No suggestion at this time'\r\n    }\r\n    \r\n    return nameOfCard(suggestedCard.card)\r\n}\r\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport { GameManager } from './GameManager';\n\nfunction App() {\n\n  const [gameStarted, setGameStarted] = useState(false)\n  const [discardMemory, setDiscardMemory] = useState(10)\n  const [gameScoreLimit, setGameScoreLimit] = useState(100)\n  const [ginBonus, setGinBonus] = useState(25)\n  const [undercutBonus, setUndercutBonus] = useState(25)\n\n\n\n  return (\n    <>\n      <h1 style={{fontFamily: 'Lato',\n                  fontSize: '80px',\n                  color: '#F1FAEE',\n                  backgroundColor:\"#457B9D\",\n                  margin:\"0\",\n                  textAlign: 'center',\n                  padding: '20px'}}>Gin Rummy</h1>\n      {\n        gameStarted ? <GameManager \n                        onExit={setGameStarted}\n                        discardMemory={discardMemory}\n                        gameScoreLimit={gameScoreLimit}\n                        undercutBonus={undercutBonus}\n                        ginBonus={ginBonus}/> : \n        <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', minHeight: '500px'}}>\n          <button className='game-button' onClick={() => setGameStarted(true)}>Start Game</button>\n          <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'start', marginTop: '20px'}}>\n            <div className='settings-item'>\n              <label className='game-text' style={{fontSize: '16px', marginRight: '10px'}}>Computer Discard Memory:</label>\n              <input type='number' style={{maxWidth: '50px'}} value={discardMemory} onChange={(e) => setDiscardMemory(e.target.value)}/>\n            </div>\n            <div className='settings-item'>\n              <label className='game-text' style={{fontSize: '16px', marginRight: '10px'}}>Game Score Limit:</label>\n              <input type='number' style={{maxWidth: '50px'}} value={gameScoreLimit} onChange={(e) => setGameScoreLimit(e.target.value)}/>\n            </div>\n            <div className='settings-item'>\n              <label className='game-text' style={{fontSize: '16px', marginRight: '10px'}}>Gin Bonus:</label>\n              <input type='number' style={{maxWidth: '50px'}} value={ginBonus} onChange={(e) => setGinBonus(e.target.value)}/>\n            </div>\n            <div className='settings-item'>\n              <label className='game-text' style={{fontSize: '16px', marginRight: '10px'}}>Undercut Bonus:</label>\n              <input type='number' style={{maxWidth: '50px'}} value={undercutBonus} onChange={(e) => setUndercutBonus(e.target.value)}/>\n            </div>\n          </div>\n        </div>\n      }\n    </>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}