{"version":3,"sources":["Constants.ts","CardHand.tsx","GameManager.tsx","App.js","reportWebVitals.js","index.js"],"names":["SUITS","CARD_VALUES","NULL_GAME","userHand","sets","runs","deadwood","computerHand","deck","discard","currentStage","userGameScore","computerGameScore","discardMemory","playerPickup","CardHand","props","gameState","setGameState","onCardSelect","hand","faceUp","getFlatHand","map","card","onClick","console","log","src","process","cardToString","alt","style","maxHeight","margin","className","marginLeft","calculateDeadwood","undefined","score","forEach","cardScore","indexOf","value","flat","concat","getCardInSequence","offset","nextValue","suit","GameManager","useState","useEffect","length","winner","drawFromDeck","faceupCard","existingSet","some","set","makesSet","filter","existingRun","run","makesSequence","computerDrawCardFromDeck","computerMoves","push","drawnCard","pop","buildHand","possibleDiscardCard","valueCount","getValueCount","highValueCardCount","maxCard","sort","cardA","cardB","rankedHand","cardValueCount","rememberDiscard","slice","preSet","preRun","nextCard","prevCard","card1","discarded","picked","cardUtilityA","cardUtilityB","rankCardUtility","selectedCard","evaluateMovesTraditional","selectedDiscardCard","discardIndex","splice","deadwoodScore","shouldKnock","knock","computerPlayerTurn","initGameState","gameWon","Modal","show","backdrop","size","centered","Dialog","Body","Footer","Button","variant","onExit","display","justifyContent","Dropdown","Toggle","path","mdiMenu","color","Menu","Item","flexDirection","alignItems","pickupCard","move","turnText","starter","startNextRound","fontSize","discardCard","marginTop","startStage","userHandFlat","Math","random","computerHandFlat","includes","flatHand","sortedHand","suitAOffset","suitBOffset","i","currentRun","filteredHand","flatCard","newHand","handState","valueCountMap","prev1","prev2","card2","next1","next2","user","playerScore","computerScore","tempDeadwood","inSet","extendsRun","updatedPlayerScore","updatedComputerScore","layoff","App","gameStarted","setGameStarted","fontFamily","backgroundColor","textAlign","padding","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98d2ec35.chunk.js","sourcesContent":["export const SUITS = ['S', 'C', 'H', 'D']\r\n\r\nexport const CARD_VALUES = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\r\n\r\nexport const STAGES = ['pickup', 'discard', 'knock', 'computer', 'endround']\r\n\r\nconst colors = [\"e63946\",\"f1faee\",\"a8dadc\",\"457b9d\",\"1d3557\"]\r\n\r\nexport const GAME_SCORE_LIMIT = 100\r\n\r\nexport const GIN_BONUS = 25\r\n\r\nexport const UNDERCUT_BONUS = 25\r\n\r\nexport const NULL_GAME = {\r\n    userHand: {sets: [], runs: [], deadwood: []},\r\n    computerHand: {sets: [], runs: [], deadwood: []},\r\n    deck: [],\r\n    discard: [],\r\n    currentStage: '',\r\n    userGameScore: 0,\r\n    computerGameScore: 0,\r\n    discardMemory: 10,\r\n    playerPickup: []\r\n}","import { CARD_VALUES } from \"./Constants\"\r\nimport { GameState } from \"./GameManager\"\r\n\r\nexport type Card = {\r\n    value: string\r\n    suit: string\r\n}\r\n\r\nexport type HandState = {\r\n    sets: Card[][]\r\n    runs: Card[][]\r\n    deadwood: Card[]\r\n}\r\n\r\nexport function CardHand(props: {hand: HandState,\r\n                                 onCardSelect?: (selectedCard: Card, gameState: GameState) => GameState,\r\n                                 gameState: GameState,\r\n                                 setGameState?: any,\r\n                                 faceUp: boolean}){\r\n    const {gameState, setGameState, onCardSelect, hand, faceUp} = props\r\n    return (\r\n        <div>\r\n            <div>\r\n                {getFlatHand(props.hand).map((card) => {\r\n                    return <img \r\n                            onClick={() => onCardSelect && setGameState ? setGameState({...onCardSelect(card, gameState)}) : console.log(\"You cannot discard an opponent's card\")} \r\n                            src={faceUp ? `${process.env.PUBLIC_URL}/cards/${cardToString(card)}.jpg` : `${process.env.PUBLIC_URL}/cards/blue_back.jpg`} \r\n                            alt={cardToString(card)} \r\n                            style={{maxHeight: 180, margin: 10}} \r\n                            key={cardToString(card)}/>\r\n                })}\r\n            </div>\r\n            {faceUp ? <p className='game-text' style={{marginLeft: '20px'}}>Score: {calculateDeadwood(hand.deadwood)}</p> : undefined}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function calculateDeadwood(deadwood: Card[]): number{\r\n    let score = 0\r\n\r\n    deadwood.forEach((card) => {\r\n        const cardScore = CARD_VALUES.indexOf(card.value) + 1\r\n        score += (cardScore > 9 ? 10 : cardScore)\r\n    })\r\n\r\n    return score\r\n}\r\n\r\nexport function getFlatHand(hand: HandState): Card[]{\r\n    return hand.sets.flat().concat(hand.runs.flat(), hand.deadwood)\r\n}\r\n\r\nexport function getCardInSequence(card: Card, offset = 1): Card | null {\r\n    const nextValue = CARD_VALUES[CARD_VALUES.indexOf(card.value) + offset]\r\n    if(!nextValue){\r\n        return null\r\n    }\r\n\r\n    return {value: nextValue, suit: card.suit}\r\n}\r\n\r\nexport function cardToString(card: Card): string{\r\n    return `${card.value}${card.suit}`\r\n}\r\n\r\nexport function nameOfCard(card: Card): string{\r\n    const suit = () => {\r\n        switch(card.suit){\r\n            case 'H':\r\n                return 'Hearts'\r\n            case 'D':\r\n                return 'Diamonds'\r\n            case 'S':\r\n                return 'Spades'\r\n            default:\r\n                return 'Clubs'\r\n    }}\r\n\r\n    const value = () => {\r\n        switch(card.value){\r\n            case 'A':\r\n                return 'Ace'\r\n            case 'K':\r\n                return 'King'\r\n            case 'Q':\r\n                return 'Queen'\r\n            case 'J':\r\n                return 'Jack'\r\n            default:\r\n                return card.value\r\n    }}\r\n\r\n    return `${value()} of ${suit()}`\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { CARD_VALUES, SUITS, GIN_BONUS, UNDERCUT_BONUS, NULL_GAME, GAME_SCORE_LIMIT } from \"./Constants\";\r\nimport _ from 'lodash';\r\nimport { CardHand, getFlatHand, getCardInSequence, HandState, Card, cardToString, calculateDeadwood, nameOfCard } from \"./CardHand\";\r\nimport Icon from '@mdi/react'\r\nimport { mdiMenu } from '@mdi/js'\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n\r\nexport type GameState = {\r\n    userHand: HandState\r\n    computerHand: HandState\r\n    deck: Card[]\r\n    discard: Card[]\r\n    currentStage: string\r\n    winner?: string\r\n    computerMoves?: string[]\r\n    userGameScore: number\r\n    computerGameScore: number\r\n    discardMemory: number\r\n    playerPickup: Card[]\r\n}\r\n\r\ntype Utility = {\r\n    card: Card\r\n    score: number\r\n}\r\n\r\nexport function GameManager(props: {onExit: (toggle: boolean) => void, discardMemory: number}){\r\n\r\n    const [gameState, setGameState] = useState<GameState>(NULL_GAME)\r\n\r\n    useEffect(()=> {\r\n        if(gameState.deck.length < 3 && gameState.winner !== 'No one'){\r\n            setGameState({...gameState, winner: 'No one', currentStage: 'endround'})\r\n        } else if(gameState.currentStage === 'computer'){\r\n            setGameState({...computerPlayerTurn(gameState)})\r\n        }\r\n    }, [gameState])\r\n\r\n    useEffect(() => setGameState({...initGameState(props.discardMemory)}), [props.discardMemory])\r\n\r\n    const turnText = () => {\r\n        switch(gameState.currentStage){\r\n            case 'discard':\r\n                return 'Click on the card you want to discard'\r\n            case 'pickup':\r\n                return 'Click on the card you want to pick up'\r\n            case 'knock':\r\n                return 'Do you want to knock?'\r\n            default:\r\n                return ''\r\n        }\r\n    }\r\n\r\n    const gameWon = gameState.userGameScore >= GAME_SCORE_LIMIT || gameState.computerGameScore >= GAME_SCORE_LIMIT\r\n\r\n    return(\r\n        <div style={{margin: '30px'}}>\r\n            <Modal show={gameWon} backdrop=\"static\" size=\"lg\" centered>\r\n                <Modal.Dialog>\r\n                    <Modal.Body>\r\n                        <p className='game-text'>{`${gameState.winner ?? ''} won the game`}</p>\r\n                        <p className='game-text'>Do you want to play again?</p>\r\n                    </Modal.Body>\r\n\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" onClick={() => setGameState(initGameState(props.discardMemory))}>Yes</Button>\r\n                        <Button variant=\"secondary\" onClick={() => props.onExit(false)}>No</Button>\r\n                    </Modal.Footer>\r\n                </Modal.Dialog>\r\n            </Modal>\r\n            <div style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                <div></div>\r\n                <CardHand hand={gameState.computerHand} gameState={gameState} faceUp={!!gameState.currentStage}/>\r\n                <Dropdown>\r\n                    <Dropdown.Toggle variant=\"outline-primary\">\r\n                        <Icon path={mdiMenu} size={2} color={\"gray\"}/>\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item  onClick={() => setGameState(initGameState(props.discardMemory))}>Reset Game</Dropdown.Item>\r\n                        <Dropdown.Item  onClick={() => props.onExit(false)}>Exit Game</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'center'}}>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n                    <p className='game-text'>Discard Pile</p>\r\n                    { gameState.discard.length > 0 ?\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/cards/${cardToString(gameState.discard[gameState.discard.length-1])}.jpg`} \r\n                            onClick={() => setGameState({...pickupCard(true, gameState)})}\r\n                            alt={cardToString(gameState.discard[gameState.discard.length-1])} \r\n                            style={{maxHeight: 180, margin: 10}}/>\r\n                        : <p style={{margin: 20}}>Empty</p>\r\n                    }\r\n                </div>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly', margin: '10px 100px 10px 100px'}}>\r\n                    {(gameState.currentStage === 'pickup' && gameState.computerMoves) ? gameState.computerMoves.map((move) => <p className='game-text'>{move}</p>) : undefined}\r\n                    <p className='game-text'>{turnText()}</p>\r\n                    {gameState.currentStage === 'knock' ? \r\n                        <div>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...knock(gameState, true)})}>Knock</button>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...gameState, currentStage: 'computer'})}>End Turn</button>  \r\n                        </div> :\r\n                        undefined\r\n                    }\r\n                    {\r\n                        gameState.currentStage === 'endround' ? \r\n                        <>\r\n                            <p className='game-text'>{`${gameState.winner ?? ''} won that round`}</p>\r\n                            <button className=\"game-button\" onClick={() => setGameState({...startNextRound(gameState)})}>End Round</button>\r\n                        </> :\r\n                        undefined\r\n                    }  \r\n                </div>\r\n                <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'space-evenly'}}>\r\n                    <p className='game-text'>Deck</p>\r\n                    <p className='game-text' style ={{fontSize: '20px'}}>{`Cards Left: ${gameState.deck.length}`}</p>\r\n                    { gameState.deck.length > 0 ?\r\n                        <img \r\n                            src={`${process.env.PUBLIC_URL}/cards/blue_back.jpg`} \r\n                            onClick={() => setGameState({...pickupCard(false, gameState)})}\r\n                            alt={cardToString(gameState.deck[gameState.deck.length-1])} \r\n                            style={{maxHeight: 180, margin: 10}}/>\r\n                        : <p style={{margin: 20}}>Empty</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div style={{display: 'flex', justifyContent: 'center'}}>\r\n                <CardHand hand={gameState.userHand} onCardSelect={discardCard} gameState={gameState} setGameState={setGameState} faceUp={true}/>\r\n            </div>   \r\n\r\n            <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-around', marginTop: '40px'}}>\r\n                <p className='game-text'>{`Player Game Score: ${gameState.userGameScore}`}</p>\r\n                <p className='game-text'>{`Computer Game Score: ${gameState.computerGameScore}`}</p>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction initGameState(discardMemory: number, startStage?: string): GameState{\r\n    let deck: Card[] = []\r\n\r\n    SUITS.forEach((suit) => {\r\n        CARD_VALUES.forEach((value) => {\r\n            deck.push({value, suit})\r\n        })\r\n    })\r\n\r\n    const userHandFlat = deck.sort(() => Math.random() - Math.random()).slice(0, 10)\r\n\r\n    deck = deck.filter((card) => !userHandFlat.includes(card))\r\n\r\n    const computerHandFlat = deck.sort(() => Math.random() - Math.random()).slice(0, 10)\r\n\r\n    deck = deck.filter((card) => !computerHandFlat.includes(card))\r\n\r\n    const discard = [deck[0]]\r\n    deck = deck.slice(1)\r\n\r\n    console.log(startStage)\r\n    const currentStage = startStage ?? (Math.random() > 0.5 ? 'computer' : 'pickup') \r\n    console.log(currentStage)\r\n\r\n    const userHand = buildHand(userHandFlat)\r\n    const computerHand = buildHand(computerHandFlat)\r\n\r\n    const userGameScore = 0\r\n    const computerGameScore = 0\r\n\r\n    console.log({ userHand, computerHand, deck, discard, currentStage, userGameScore, computerGameScore })\r\n\r\n    return { userHand, computerHand, deck, discard, currentStage, userGameScore, computerGameScore, discardMemory, playerPickup: []}\r\n}\r\n\r\nfunction startNextRound(gameState: GameState): GameState {\r\n    const userGameScore = gameState.userGameScore\r\n    const computerGameScore = gameState.computerGameScore\r\n\r\n    const starter = gameState.winner === 'You' ? 'pickup' : 'computer'\r\n\r\n    return {...initGameState(gameState.discardMemory, starter), computerGameScore, userGameScore}\r\n}\r\n\r\nfunction buildHand(flatHand: Card[]): HandState{\r\n    const sortedHand = flatHand.sort((cardA, cardB) => {\r\n\r\n        const suitAOffset = SUITS.indexOf(cardA.suit) * 13\r\n        const suitBOffset = SUITS.indexOf(cardB.suit) * 13\r\n\r\n        const valA = CARD_VALUES.indexOf(cardA.value)\r\n        const valB = CARD_VALUES.indexOf(cardB.value)\r\n\r\n        return (suitAOffset+valA) - (suitBOffset+valB)\r\n    })\r\n\r\n    const runs: Card[][] = []\r\n\r\n    for(let i = 0; i < sortedHand.length-2; i++){\r\n        const currentRun: Card[] = []\r\n\r\n        if(makesSequence(sortedHand, sortedHand[i])){\r\n            currentRun.push(sortedHand[i])\r\n\r\n            let nextCard = getCardInSequence(sortedHand[i], 1)\r\n            while(!!nextCard && sortedHand.some(card => card.value == nextCard?.value && card.suit == nextCard?.suit) && i < sortedHand.length){\r\n                currentRun.push(nextCard)\r\n                i++\r\n\r\n                nextCard = getCardInSequence(sortedHand[i], 1)\r\n            }\r\n        }\r\n\r\n        if(currentRun.length > 2){\r\n            runs.push(currentRun)\r\n        }\r\n    }\r\n\r\n    const filteredHand = flatHand.filter((card) => !runs.flat().some(flatCard => card.value === flatCard?.value && card.suit === flatCard?.suit))\r\n\r\n    const sets: Card[][] = []\r\n    \r\n    CARD_VALUES.forEach((value) => {\r\n        const set: Card[] = []\r\n        SUITS.forEach((suit) => {\r\n            if(filteredHand.some(card => card.suit === suit && card.value === value)){\r\n                set.push({suit, value})\r\n            }\r\n        })  \r\n        \r\n        if(set.length > 2){\r\n            sets.push(set)\r\n        }\r\n    })\r\n\r\n    const deadwood = filteredHand.filter((card) => !sets.flat().some(flatCard => card.value === flatCard?.value && card.suit === flatCard?.suit))\r\n\r\n    /*sets.forEach((set) => {\r\n        if(set.filter(card => !!card).length > 3){\r\n            console.log(set)\r\n            const extraCard = set.find(card => makesSequence(deadwood, card))\r\n\r\n            if(extraCard){\r\n                const extraCardIndex = set.findIndex((card) => card.value === extraCard.value)\r\n                set.splice(extraCardIndex, 1)\r\n\r\n                const newSequence = () => {\r\n                    switch(extraCard.value){\r\n                        case 'K':\r\n                            return [getCardInSequence(extraCard, -2), getCardInSequence(extraCard, -1), extraCard]\r\n                        case 'A':\r\n                            return [extraCard, getCardInSequence(extraCard, 1), getCardInSequence(extraCard, 2)]\r\n                        default:\r\n                            return [getCardInSequence(extraCard, -1), extraCard, getCardInSequence(extraCard, 1)]\r\n                    }\r\n                }\r\n\r\n                const newRun: Card[] = []\r\n\r\n                newSequence().forEach((card) => {\r\n                    if(card){\r\n                        newRun.push(card)\r\n                        const deadIndex = deadwood.findIndex(deadCard => deadCard.value === card.value && deadCard.suit === card.suit)\r\n                        if(deadIndex > -1){\r\n                            deadwood.splice(deadIndex, 1)\r\n                        }\r\n                    }\r\n                })\r\n\r\n                runs.push(newRun)\r\n            }\r\n        }\r\n    }) \r\n\r\n    const deadwoodCardCount = getValueCount(deadwood)\r\n    console.log(sets)\r\n    console.log(runs)\r\n    runs.forEach((run) => {\r\n        if(run.filter(card => !!card).length > 3){\r\n            console.log(run)\r\n            const extraCard = run.find(card => deadwoodCardCount[card.value] > 1 && [0, run.length-1].includes(run.findIndex(runCard => runCard.value === card.value && runCard.suit === card.suit)))\r\n                \r\n            if(extraCard){\r\n                const extraCardIndex = run.findIndex((card) => card.value === extraCard.value)\r\n                run.splice(extraCardIndex, 1)\r\n\r\n                const newSet = deadwood.filter(card => card.value === extraCard.value)\r\n                newSet.push(extraCard)\r\n                sets.push(newSet)\r\n            }\r\n        }\r\n    })*/\r\n    \r\n    return {sets, runs, deadwood}\r\n}\r\n\r\nfunction discardCard(selectedCard: Card, gameState: GameState): GameState{\r\n\r\n    if(gameState.currentStage === 'discard'){\r\n        const hand = getFlatHand(gameState.userHand)\r\n        const newHand = buildHand(hand.filter((card) => (card.value !== selectedCard.value) || (card.suit !== selectedCard.suit)))\r\n    \r\n        gameState.discard.push(selectedCard)\r\n        gameState.userHand = newHand\r\n        \r\n        gameState.currentStage = calculateDeadwood(gameState.userHand.deadwood) > 10 ? \"computer\" : \"knock\"\r\n    }\r\n\r\n    return gameState\r\n}\r\n\r\nfunction pickupCard(faceUp: boolean, gameState: GameState): GameState{\r\n\r\n    if(gameState.currentStage === \"pickup\"){\r\n        const selectedCard = faceUp ? gameState.discard.pop() : gameState.deck.pop()\r\n\r\n        if(selectedCard){\r\n            const hand = getFlatHand(gameState.userHand)\r\n            hand.push(selectedCard)\r\n    \r\n            const handState = buildHand(hand)\r\n            gameState.userHand = handState\r\n            gameState.currentStage = \"discard\"\r\n            gameState.playerPickup.push(selectedCard)\r\n        }\r\n    }\r\n\r\n    return gameState\r\n}\r\n\r\nfunction computerPlayerTurn(gameState: GameState){\r\n\r\n    // Decide if drawing face up or face down card\r\n    const drawFromDeck = computerDrawCardFromDeck(gameState)\r\n\r\n    const computerMoves = []\r\n\r\n    drawFromDeck ? computerMoves.push('Computer drew from deck') : computerMoves.push('Computer drew from discard')\r\n\r\n    const drawnCard = drawFromDeck ? gameState.deck.pop() : gameState.discard.pop()\r\n\r\n    const hand = getFlatHand(gameState.computerHand)\r\n\r\n    if(drawnCard){\r\n        hand.push(drawnCard)\r\n\r\n        gameState.computerHand = buildHand(hand)   \r\n    }\r\n\r\n    // Evaluate the card to discard that maximizes computer gain while minimizing \r\n    // player gain\r\n    const possibleDiscardCard = evaluateMovesTraditional(gameState)\r\n    const selectedDiscardCard  = typeof possibleDiscardCard === \"string\" && drawnCard ? drawnCard : possibleDiscardCard\r\n\r\n    if(typeof selectedDiscardCard != 'string'){\r\n        computerMoves.push(`Opponent discarded the ${nameOfCard(selectedDiscardCard)}`) \r\n\r\n        // Discard the card\r\n        const discardIndex = hand.indexOf(selectedDiscardCard);\r\n        if (discardIndex > -1) {\r\n            const discarded = hand.splice(discardIndex, 1);\r\n            gameState.discard.push(discarded[0])\r\n        }\r\n    }\r\n\r\n    gameState.computerHand = buildHand(hand)  \r\n\r\n    // Declare knocking if criteria met\r\n    if(shouldKnock(gameState)){\r\n        return knock(gameState, false)\r\n    }\r\n    gameState.currentStage = \"pickup\"\r\n    gameState.computerMoves = computerMoves\r\n\r\n    return gameState\r\n}\r\n\r\nfunction computerDrawCardFromDeck(gameState: GameState): boolean {\r\n\r\n    if(gameState.discard.length > 0){\r\n        const faceupCard = gameState.discard[gameState.discard.length - 1]\r\n    \r\n        const existingSet = gameState.computerHand.sets.some((set) => set[0].value=== faceupCard.value)\r\n\r\n        const makesSet = gameState.computerHand.deadwood.filter((card) => card.value === faceupCard.value).length > 1\r\n\r\n        const existingRun = gameState.computerHand.runs.some((run) => getCardInSequence(run[run.length-1], 1) === faceupCard || getCardInSequence(run[0], -1) === faceupCard)\r\n    \r\n        if(makesSet || existingSet || existingRun || makesSequence(gameState.computerHand.deadwood, faceupCard)){\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction getValueCount(hand: Card[]): any {\r\n\r\n    const valueCountMap: any = {'A': 0, '2': 0, '3': 0, '4': 0, '5' : 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, 'J': 0, 'Q': 0, 'K': 0}\r\n\r\n    hand.forEach((card) => {\r\n        if(card.value in valueCountMap){\r\n            valueCountMap[card.value] += 1 \r\n        }\r\n    })\r\n\r\n    return valueCountMap\r\n}\r\n\r\nfunction makesSequence(hand: Card[], card: Card): boolean{\r\n\r\n    if(card.value !== 'A' && card.value !== '2'){\r\n        const prev1 = getCardInSequence(card, -1)\r\n        const prev2 =  getCardInSequence(card, -2)\r\n\r\n        if(prev1 && prev2 && hand.some(card1 => cardToString(card1) === cardToString(prev1)) &&  hand.some(card2 => cardToString(card2) === cardToString(prev2))){\r\n            return true\r\n        }\r\n    }\r\n\r\n    if(card.value !== 'K' && card.value !== 'Q'){\r\n        const next1 = getCardInSequence(card, 1)\r\n        const next2 =  getCardInSequence(card, 2)\r\n\r\n        if(next1 && next2 && hand.some(card1 => cardToString(card1) === cardToString(next1)) && hand.some(card2 => cardToString(card2) === cardToString(next2))){\r\n            return true\r\n        }\r\n    }\r\n\r\n    const prev1 = getCardInSequence(card, -1)\r\n    const next1 = getCardInSequence(card, 1)\r\n\r\n    if(prev1 && next1 && hand.some(card1 => cardToString(card1) === cardToString(prev1)) && hand.some(card1 => cardToString(card1) === cardToString(next1))){\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction evaluateMovesTraditional(gameState: GameState): Card | string{\r\n\r\n    const valueCount = getValueCount(gameState.computerHand.deadwood)\r\n    const highValueCardCount = valueCount['10'] + valueCount['J'] + valueCount['Q'] + valueCount['K']\r\n\r\n    // If half of deck expended start getting rid of high value cards if there are any in hand\r\n    if(gameState.deck.length < 20 && highValueCardCount > 0){\r\n        const maxCard = gameState.computerHand.deadwood.sort((cardA, cardB) =>  CARD_VALUES.indexOf(cardA.value) - CARD_VALUES.indexOf(cardB.value)).pop()\r\n\r\n        return maxCard ? maxCard : 'knock'\r\n    } \r\n\r\n    // Ranks cards by their likelyhood to contribute to a future set/run\r\n    // Discard lowest of these\r\n    const rankedHand = rankCardUtility(gameState)\r\n\r\n    const selectedCard = rankedHand.pop()?.card\r\n\r\n    return selectedCard ? selectedCard : 'knock'\r\n}\r\n\r\nfunction shouldKnock(gameState: GameState): boolean {\r\n    // TODO extend for other situations\r\n    const deadwoodScore = calculateDeadwood(gameState.computerHand.deadwood)\r\n\r\n    if(deadwoodScore < 3){\r\n        return true\r\n    } else if(deadwoodScore < 7 && gameState.deck.length > 18){\r\n        return true\r\n    } else if(deadwoodScore <= 10 && gameState.deck.length > 25){\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfunction rankCardUtility(gameState: GameState): Utility[]{\r\n\r\n    // +1 for every copy of the card\r\n    // +1 for every card in sequence\r\n    // +1 if part of trio\r\n    // -1 if greater than 9\r\n    // +1 if A or 2\r\n\r\n    const {computerHand, playerPickup, discardMemory} = gameState\r\n\r\n    const deadwood = computerHand.deadwood\r\n\r\n    const cardValueCount = getValueCount(deadwood)\r\n\r\n    const rememberDiscard = gameState.discard.length >= discardMemory ? gameState.discard.slice(gameState.discard.length-discardMemory) : []\r\n\r\n    const cardRanking = deadwood.map((card) =>{\r\n        let score = 0\r\n        let preSet = false\r\n        let preRun = false\r\n\r\n        if(cardValueCount[card.value] > 1){\r\n            score += (cardValueCount[card.value] - 84)\r\n            preSet = true\r\n        }\r\n\r\n        const nextCard = getCardInSequence(card, 1)\r\n        const prevCard = getCardInSequence(card, -1)\r\n\r\n        if((nextCard && deadwood.some(card1 => cardToString(card1) === cardToString(nextCard))) || (prevCard && deadwood.some(card1 => cardToString(card1) === cardToString(prevCard)))){\r\n            score += 82\r\n            preRun = true\r\n        }\r\n\r\n        if(preRun && preSet){\r\n            score += 10\r\n        }\r\n\r\n        rememberDiscard.forEach((discarded) => {\r\n            if(discarded.value === card.value){\r\n                score -= 71\r\n            } else if(discarded.suit === card.suit && (getCardInSequence(card, 1)?.value === discarded.value || getCardInSequence(card, -1)?.value === discarded.value)){\r\n                score -= 71\r\n            }\r\n        })\r\n\r\n        playerPickup.forEach((picked) => {\r\n            if(picked.value === card.value){\r\n                score -= 15\r\n            } else if(picked.suit === card.suit && (getCardInSequence(card, 1)?.value === picked.value || getCardInSequence(card, -1)?.value === picked.value)){\r\n                score -= 15\r\n            }\r\n        })\r\n\r\n        score -= (CARD_VALUES.indexOf(card.value) + 1)/10\r\n\r\n        return {card, score}\r\n    }).sort((cardUtilityA, cardUtilityB) => cardUtilityB.score - cardUtilityA.score)\r\n\r\n    return cardRanking\r\n}\r\n\r\nfunction knock(gameState: GameState, user: boolean): GameState{\r\n\r\n    gameState.currentStage = 'endround'\r\n\r\n    const playerScore = calculateDeadwood(gameState.userHand.deadwood)\r\n    const computerScore = calculateDeadwood(gameState.computerHand.deadwood)\r\n\r\n    if(user && (playerScore === 0)){\r\n        return {...gameState, userGameScore: gameState.userGameScore + computerScore+GIN_BONUS, winner: 'You'}\r\n    } else if(!user && (computerScore === 0)){\r\n        return {...gameState, computerGameScore:  gameState.computerGameScore + playerScore+GIN_BONUS, winner: 'Your Opponent'}\r\n    }\r\n\r\n    const {updatedPlayerScore, updatedComputerScore} = layoff(gameState, user)\r\n\r\n    if(user && (updatedPlayerScore < updatedComputerScore)){\r\n        return {...gameState, userGameScore: gameState.userGameScore + updatedComputerScore - updatedPlayerScore, winner: 'You'}\r\n    } else if(user && (updatedPlayerScore > updatedComputerScore)){\r\n        return {...gameState, computerGameScore: gameState.computerGameScore + updatedPlayerScore - updatedComputerScore + UNDERCUT_BONUS,  winner: 'Your Opponent'}\r\n    } else if(!user && (updatedPlayerScore < updatedComputerScore)){\r\n        return {...gameState, userGameScore:   gameState.userGameScore + updatedComputerScore - updatedPlayerScore + UNDERCUT_BONUS,  winner: 'You'}\r\n    } else {\r\n        return {...gameState, computerGameScore:  gameState.computerGameScore + updatedPlayerScore - updatedComputerScore,  winner: 'Your Opponent'}\r\n    }\r\n}\r\n\r\nfunction layoff(gameState: GameState, user: boolean): {updatedPlayerScore: number, updatedComputerScore: number}{\r\n\r\n    if(user){\r\n        const tempDeadwood = gameState.computerHand.deadwood.filter((card) => {\r\n            const inSet = gameState.userHand.sets.some((set) => set[0].value === card.value)\r\n            const extendsRun = gameState.userHand.runs.some((run) => makesSequence(run, card))\r\n            return !inSet && !extendsRun\r\n        })\r\n\r\n        return {updatedPlayerScore: calculateDeadwood(gameState.userHand.deadwood), updatedComputerScore: calculateDeadwood(tempDeadwood)}\r\n    } else {\r\n        const tempDeadwood = gameState.userHand.deadwood.filter((card) => {\r\n            const inSet = gameState.computerHand.sets.some((set) => set[0].value === card.value)\r\n            const extendsRun = gameState.computerHand.runs.some((run) => makesSequence(run, card))\r\n            return !inSet && !extendsRun\r\n        })\r\n\r\n        return {updatedPlayerScore: calculateDeadwood(tempDeadwood), updatedComputerScore: calculateDeadwood(gameState.computerHand.deadwood)}\r\n    }\r\n}\r\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport { GameManager } from './GameManager';\n\nfunction App() {\n\n  const [gameStarted, setGameStarted] = useState(false)\n\n  return (\n    <>\n      <h1 style={{fontFamily: 'Lato',\n                  fontSize: '80px',\n                  color: '#F1FAEE',\n                  backgroundColor:\"#457B9D\",\n                  margin:\"0\",\n                  textAlign: 'center',\n                  padding: '20px'}}>Gin Rummy</h1>\n      {\n        gameStarted ? <GameManager onExit={setGameStarted} discardMemory={10}/> : \n        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '500px'}}>\n          <button className='game-button' onClick={() => setGameStarted(true)}>Start Game</button>\n        </div>\n      }\n    </>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}